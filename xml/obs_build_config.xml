<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.1" xml:id="cha.obs.prjconfig"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" >
 <title>Project Configuration</title>
 <info/>

 <sect1>
  <title>About the Project Configuration</title>
  <para>
   Each project has a <firstterm>project configuration</firstterm> which
   defines the setup of the build system. Usually it is empty and you do
   not need to change anything. However, when you change it, it can be
   used for the following reasons:
  </para>
  <remark>toms 2017-08-18: Add more reasons why it is needed</remark>
  <itemizedlist>
   <listitem>
    <para>
     Handle compatibility layers. <remark>toms 2017-08-18: more info needed!</remark>
    </para>
   </listitem>
   <listitem>
    <para>
     Switch on or off certain features during the build.
    </para>
   </listitem>
   <listitem>
    <para>
     Decide which package is installed during build if there are circular
     dependencies.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   To view the project configuration, use one of the following methods
  </para>
  <itemizedlist>
   <listitem>
    <formalpara>
     <title>With &osccmd;</title>
     <para>Use <command>osc meta prjconf</command> in your working directory
     of your project.</para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <title>In the &obsa; Web UI</title>
     <para>Via the <guimenu>Project Config</guimenu> tab.</para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <title>With the &obsa; API</title>
     <para>Reachable via the <uri>/source/PROJECT/_config</uri> path.</para>
    </formalpara>
    <para></para>
   </listitem>
  </itemizedlist>
 </sect1>

 <sect1>
  <title>Configuration File Syntax</title>
  <para> The build configuration is parsed by OBS in rpm style independent of
   the used packaging format. This means that you can use rpm features like
   macros or conditions in the configuration. All lines consist of the form
   'keyword: arguments'. </para>
  <para> &lt;PACKAGES&gt; mean binary package provides, but not the full file
   name. For example gcc, but not gcc-1.2.3.i386.rpm. Provides of a package can
   not be used either."</remark>
  </para>

  <para>
   The following list contains a list of allowed keywords in the project
   configuration:
  </para>
  <remark>toms 2017-08-18: TODO: Sort it alphabetically</remark>
  <variablelist>
   <title>Available Keywords in Project Configuration</title>
   <varlistentry>
    <term><parameter>Required: <replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      Contain one or more packages that always get installed for package
      builds. A change in one of these packages triggers a new build.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Support: <replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      Contain one or more packages which also get installed for package
      builds, but a change in one of the packages does not trigger
      an automatic rebuild.
     </para>
     <para>
      This is useful for packages that most likely do not influence the build
      result, for example <package>make</package> or <package>coreutils</package>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Preinstall: <replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      Are needed to run the package installation program. These packages get
      unpacked before the VM gets started. Included scripts
      are <emphasis>not</emphasis> executed during this phase. However, these
      packages will get installed again inside of the VM including script
      execution.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Keep: <replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      To eliminate build cycles the to-be-built package is not installed
      by default, even when it is required. Keep can be used overwrite this
      behavior. It is usually needed for packages like 'make' that are used to
      build itself. Preinstalled packages are automatically kept, as the
      package installation program needs to work all the time.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>VMInstall: <replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      Like <parameter>Preinstall</parameter>, but these packages get only
      installed when a virtual machine like Xen or KVM is used for building.
      Usually  packages like <package>mount</package> are listed here.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Runscripts: <replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      Defines the scripts of preinstalled packages which needs to be executed
      directly after the preinstall phase, but before installing the
      remaining packages.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Order: <replaceable>PACKAG_A</replaceable>:<replaceable>PACKAGE_B</replaceable></parameter></term>
    <listitem>
     <para>
      The build script takes care about the installation order if they
      are defined via dependencies inside of the packages. However, there
      might be dependency loops (reported during setup of the build system) or
      missing dependencies. The <parameter>Order</parameter> statement can
      be used then to give a hint where to break the loop.
     </para>
     <para>The package in <replaceable>PACKAGE_A</replaceable> will get
      installed before the package in <replaceable>PACKAGE_B</replaceable>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>ExportFilter: <replaceable>REGEX</replaceable> <replaceable>ARCH</replaceable></parameter></term>
    <listitem>
     <para>
      The export filter can be used to export build results from one
      architecture to others. This is required when one architecture needs
      packages from another architecture for building.
      The <replaceable>REGEX</replaceable> placeholder must match
      the resulting binary name of the package. It will export it to all listed
      scheduler architectures. Using a single dot will export it to the
      architecture which was used to build it. So not using a dot there will
      filter the package.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>PublishFilter: <replaceable>REGEXP</replaceable> [<replaceable>REGEXP</replaceable>]</parameter></term>
    <listitem>
     <para>
      Limits the published binary packages in public repositories. Packages
      that match any <replaceable>REGEXP</replaceable> will not be put into
      the exported repository. There can be only one line of
      PublishFilter for historic reasons. However, multiple
      <replaceable>REGEXP</replaceable> can be definied.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Prefer: <replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      In case multiple packages satisfy a dependency, the OBS system will
      complain about that situation. This is unlike like most package managing
      tools, which just pick one of the package. Because one of OBS' goal is to
      provide reproducible builds, it reports an error in this case instead of
      choosing a random package. The Prefer: tag lists packages to be preferred
      in case a choice exists. When the package name is prefixed with a dash,
      this is treated as a de-prefer.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Prefer: <replaceable>PACKAGE_A</replaceable>:<replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      It is possible to define the prefer only when one package is creating
    the choice error. This package must be listed first with a colon.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Ignore: <replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      Ignore can be used to break dependencies. This can be useful to
      reduce the number of needed packages or to break cyclic dependencies. Be
      careful with this feature, as breaking dependencies can have surprising
      results.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Ignore: <replaceable>PACKAGE_A</replaceable>:<replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      It is possible to define the ignore only for one package. This
      package must be listed first with a colon.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>FileProvides: <replaceable>FILE</replaceable> <replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para> &obsa; ignores dependencies to files (instead of package names) by
      default. This is mostly done to reduce the amount of memory needed, as
      the package file lists take up a considerable amount of repository meta
      data. As a workaround, FileProvides can be used to tell the systems which
      packages contain a file. The File needs to have the full path.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Substitute: <replaceable>PACKAGE_A</replaceable> <replaceable>PACKAGES</replaceable></parameter></term>
    <listitem>
     <para>
      It is possible to replace to BuildRequires with other packages.
      This will have only an affect on directly BuildRequired packages, not on
      indirectly required packages.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>BuildFlags: <replaceable>FLAG</replaceable>:<replaceable>VALUE</replaceable></parameter></term>
    <listitem>
     <para>
      The <parameter>BuildFlags</parameter> keyword defines flags for the
      build process. The following values for  FLAG are usable.</para>
     <variablelist>
      <varlistentry>
       <term><parameter>vmfstype:</parameter></term>
       <listitem>
        <para>Defines a specific file system when building inside of a VM. </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>kiwiprofile:</parameter></term>
       <listitem>
        <para>builds the selected profile in &kiwi; appliance builds. </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>BuildEngine: <replaceable>ENGINE</replaceable></parameter></term>
    <listitem>
     <para> Use an alternative build engine. This is still chained inside of
      the build script for security reasons. Alternatives are mock (for Fedora
      and Red Hat) and debootstrap (for Debian). This will avoid differences in
      the build environment setup, but it will also have an effect on speed and
      reduced features. It should only be used when you want to emulate the
      distribution build. debbuild engine will build deb files out of a spec
      file description. It can be used by the following definition inside of
      the project build config:</para>
     <screen>Repotype: debian
Type: spec
Binarytype: deb
BuildEngine: debbuild
Support: pax
Support: debbuild
Keep: debbuild</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>OptFlags: <replaceable>TARGET_ARCH</replaceable> <replaceable>FLAGS</replaceable></parameter> (RPM only)</term>
    <listitem>
     <para>
      Optflags exports compiler flags to the build. They will only have an
      effect when the spec file is using $RPM_OPT_FLAGS. The target
      architecture may be * to affect all architectures.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Type: <replaceable>TYPE</replaceable></parameter></term>
    <listitem>
     <para>
      Build recipe type. This is the format of the file which provides the
      build description. This gets usually autodetected, but in some rare cases
      it can be set here to either one of these: spec, dsc, kiwi, livebuild,
      arch, preinstallimage.
     </para>
     <para>Defines the recipe format. Valid values are currently: none, spec,
      dsc, arch, kiwi, preinstallimage. If no type is specified, OBS deduces a
      type from the binary type. </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>BinaryType: <replaceable>TYPE</replaceable></parameter> (OBS 2.4 or later)</term>
    <listitem>
     <para>
      Binary type. This is the format of the files which will be the
      result of the build jobs. This gets usually set depending on the build
      recipe type. In some situations, for example a &kiwi; build job result
      gets converted into an rpm, it can be used to overwrite it. Possible
      values are: rpm, deb or none.
     </para>
     <para>Sets the binary format used to setup the build
      environment. For example a package with spec build description may use
      and generate deb packages instead of rpms. If no binary type is
      specified, OBS deduces it from the recipe type. If the recipe type is
      also not set, OBS looks at the Preinstall package list for a hint.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Target: <replaceable>TARGET_ARCH</replaceable></parameter> (RPM only)</term>
    <listitem>
     <para>Defines the target architecture. This can be used to build for i686
      on i586 schedulers for example.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>HostArch: <replaceable>HOST_ARCH</replaceable></parameter></term>
    <listitem>
     <para>
      This is used for cross builds. It defines the host architecture used
      for building, while the scheduler architecture remains the target
      architecture.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Repotype:  <replaceable>TYPE[:OPTIONS]</replaceable></parameter></term>
    <listitem>
     <para> Defines the repository format for published repositories. Valid
      values are: none, rpm-md, suse, debian, hdlist2, arch, staticlinks. The
      OPTIONS parameter depends on the repository type, for rpm-md the known
      options are 'legacy' to create the old rpm-md format, 'deltainfo' or
      'prestodelta' to create delta rpm packages, 'rsyncable' to use rsyncable
      gzip compression. To split the debug packages in an own published
      repository the option
        <literal>splitdebug:<replaceable>REPOSITORY_SUFFIX</replaceable></literal>
      can be used. </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Patterntype: <replaceable>TYPES</replaceable></parameter></term>
    <listitem>
     <para>
      Defines the pattern format. Valid values are: none (default), ymp, comps.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>Constraint: <replaceable>SELECTOR</replaceable> <replaceable>STRING</replaceable></parameter> (OBS 2.4 or later)</term>
    <listitem>
     <para>
      Define build constraints for build jobs. The selector is a
      colon-separated list which gets a string assigned. See the build job
      constraints page for details.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1>
  <title>Macro Section</title>
  <remark>toms 2017-08-18: TODO: Extend this section</remark>
  <para> The macro section of the build configuration starts behind a Macros:
   line and is only used on rpm builds. The content gets exported to be used by
   rpmbuild during the build. It can be used to export a define using "%key
   value" lines. </para>
 </sect1>
</chapter>
