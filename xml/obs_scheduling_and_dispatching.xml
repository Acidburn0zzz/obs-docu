<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC
  "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.docbook.org/xml/4.5/docbookx.dtd"
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>

<chapter id="cha.obs.build_scheduling_and_dispatching">
  <title>Scheduling and Dispatching</title>
  <para>One of the major functionalities of OBS is to calculate always the current state, based on
available sources, binaries and user configurations. In case a change happened it will trigger builds
to achieve a clean state again. The calculation of the need of a build job is called scheduling here. 
The assignment of a build job to a concrete build host (aka worker) is called dispatching.</para>

  <section>
    <title>How is a build process defined</title>
    <para>A build process is calculated and executed based on the following</para>
<itemizedlist>
    <listitem><simpara>
      The sources of a package defined which dependencies are required at build time. eg. "BuildRequire:" 
      lines in spec files defined which other packages must get installed to build a package
    </simpara></listitem>
    <listitem><simpara>
      The project configuration of the package defines repositories and architectures to build for.
      In case other repositories are used as a base the configuration from there is also considered.
    </simpara></listitem>
    <listitem><simpara>
      Dependencies of packages which are required are considered as well.
    </simpara></listitem>
    <listitem><simpara>
      Constraints regarding the worker are considered. A package may require certain amount of 
      resources or specific features to build. Please check the constraints chapter for details.
      However, apart from this the build should be independent of the specific worker where
      the job gets dispatched to.
    </simpara></listitem>
</itemizedlist>
  </section>

  <section>
    <title>Scheduling strategies</title>
    <para>The defaults have the goal to create an always reproducible state. This may lead to more builds
then practical necessary, but ensures that no hidden incompabilities between packages exist and also that
the state can be achieved later again. This can also lead to multiple builds of the same package in case dependency loops.</para>
    <para>In some setups this may not be wanted, so each repository can be configured in a different way.
The usual options to modify the project meta configurations can be used to configure different startegies.
For example using osc:
	 <screen><command>
	 osc meta prj -e YOUR_PROJECT
	 </command></screen>
	A repository is configured as following by default, however only the name attribute is required to be set.
	 <screen>
	 # Example
	 &lt;repository name="standard" rebuild="transitive" block="all" linkedbuild="off"&gt;
	     ...
	 &lt;/repository&gt;
	 </screen>
    </para>

    <section>
      <title>Build Trigger Setting</title>

      <para>
	The build trigger setting can be set via the "rebuild" attribute. Possible  settings are
	<itemizedlist>
	    <listitem><simpara>
	      '''transitive''': The default behaviour, do a clean build of all depending packages
	    </simpara></listitem>
	    <listitem><simpara>
	   '''direct''': Just build the package with changed sources and direct depending packages. But not indirect depending packages.
	    </simpara></listitem>
	    <listitem><simpara>
	      '''local''': Just build packages with changed sources.
	    </simpara></listitem>
	</itemizedlist>

	Note: You can run into dependency problems in case you select "direct" or "local" without noticing this in the build state. Your packages might not even be installable or have random runtime errors (like not starting up or crashing applications), even when they claim to be "succeeded". You can also not be sure that you will be able to re-build them later. So never do a official shipment with this setting of a release.
      </para>
    </section>

    <section>
      <title>Block Mode</title>
      <para>

	Usually the build of a package gets blocked when a package required to build it is still building atm. The "block" attribute can modify this behaviour:
	<itemizedlist>
	    <listitem><simpara>
	      '''all''': The default behaviour, don't start the build if a depending package is currently building.
	    </simpara></listitem>
	    <listitem><simpara>
	      '''local''': Just care about packages in your project for the block mode.
	    </simpara></listitem>
	    <listitem><simpara>
	      '''never''': Never set a package to blocked.
	    </simpara></listitem>
	</itemizedlist>

	Note: When using something else then "all" you will have to deal with a number of problems:
	<itemizedlist>
	    <listitem><simpara>
		Intermediate builds can have dependency and runtime problems.
	    </simpara></listitem>
	    <listitem><simpara>
		Your packages will get built more often, take more resources on the server side. As a result the dispatcher will rate your repository down.
	    </simpara></listitem>
	</itemizedlist>
      </para>
    </section>

    <section>
      <title>Follow Project Links</title>

      <para>
	<itemizedlist>
	    <listitem><simpara>
	      '''off''': DEFAULT: do not build packages from project links
	    </simpara></listitem>
	    <listitem><simpara>
	      '''localdep''': only build project linked packages if they depend on a local package
	    </simpara></listitem>
	    <listitem><simpara>
	      '''all''': treat packages from project links like local packages
	    </simpara></listitem>
	</itemizedlist>
      </para>
    </section>


  </section>
  

</chapter>
