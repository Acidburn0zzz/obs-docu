<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC
  "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.docbook.org/xml/4.5/docbookx.dtd"
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
  <section id="_publisher_hooks">
   <title>Publisher Hooks</title>
   <simpara>The job of the publisher service (see <xref linkend="_publisher"/>) is to publish the build packages and/or images
by creating repositories that are made available through a web server.</simpara>
   <simpara>It can be configured to use custom scripts to copy the build results to
different servers or do anything with them that comes to mind.  These
scripts are called <emphasis role="strong"><emphasis>publisher hooks</emphasis></emphasis>.</simpara>
   <section id="_publisher_hooks_configuration">
    <title>Publisher Hooks configuration</title>
    <simpara>Hooks are configured via the configuration file
<emphasis>/usr/lib/obs/server/BSConfig.pm</emphasis>, where one script per project is linked
to the repository that should be run if the project/repository combination is
published. It is possible to use regular expressions here.</simpara>
    <simpara>The script is called by the <emphasis role="strong">obsrun</emphasis> user with the following parameters:</simpara>
    <orderedlist numeration="arabic">
     <listitem>
      <simpara>
information about the project and its repository (e.g. <emphasis>training/SLE11-SP1</emphasis>)
</simpara>
     </listitem>
     <listitem>
      <simpara>
path to published repository (e.g. <emphasis>/srv/obs/repos/training/SLE11-SP1</emphasis>)
</simpara>
     </listitem>
     <listitem>
      <simpara>
changed packages (e.g. <emphasis>x86 64/test.rpm x86 64/utils.rpm</emphasis>)
</simpara>
     </listitem>
    </orderedlist>
    <simpara>The hooks are configured by adding a hash reference named <emphasis>$publishedhook</emphasis> to
the <emphasis>BSConfig.pm</emphasis> configuration file. The key contains the project, and the
value references the accompanying script.  If the value is written as an array
reference it is possible to call the hook with self-defined parameters.</simpara>
    <simpara>The publisher will add the 3 listed parameters at the end (after the self
defined parameters).</simpara>
    <screen>/usr/lib/obs/server/BSConfig.pm

    our $publishedhook = {
     "Product/SLES12"     =&gt; "/usr/local/bin/script2run_sles12",
     "Product/SLES11-SP3" =&gt; "/usr/local/bin/script2run_sles11",
     "Product/SLES11-SP4" =&gt; "/usr/local/bin/script2run_sles11",
    };</screen>
    <simpara>Regular expressions or substrings can be used to define a script for more than one repository in one project.
The use of regular expressions has to be activated by defining <emphasis>$publishedhook use regex = 1;</emphasis> as follows:</simpara>
    <screen>/usr/lib/obs/server/BSConfig.pm

    our $publishedhook_use_regex = 1;
    our $publishedhook = {
        "Product\/SLES12"     =&gt; "/usr/local/bin/script2run_sles12",
        "Product\/SLES11.*"   =&gt; "/usr/local/bin/script2run_sles11",
    };</screen>
    <simpara>With self defined parameters:</simpara>
    <screen>    our $publishedhook_use_regex = 1;
    our $publishedhook = {
        "Product\/SLES11.*" =&gt; ["/usr/local/bin/script2run", "sles11", "/srv/www/public_mirror"],
    };</screen>
    <simpara>The configuration is read by the publisher at startup only, so it has to be restarted after cofiguration changes have been made.
The hook script’s output is not logged by the publisher and should be written to a logfile by the script itself. In case of a broken script,this is logged in the publisher’s logfile (/srv/obs/log/publisher.log by default):</simpara>
    <screen>Mon Mar  7 14:34:17 2016 publishing Product/SLES12
    fetched 0 patterns
    running createrepo
    calling published hook /usr/local/bin/script2run_sles12
    /usr/local/bin/script2run_sles12 failed: 65280
    syncing database (6 ops)</screen>
    <simpara>Interactive scripts are not working and will fail immediately.</simpara>
    <simpara>If you need to do a lot of work in the hook script and dont want to block the publisher all the time, you should consider using a separate daemon that does all the work and just gets triggered by the configured hook script.</simpara>
    <simpara>The scripts are called without a timeout.</simpara>
   </section>
   <section id="_example_publisher_scripts">
    <title>Example Publisher Scripts</title>
    <section id="_simple_publisher_hook">
     <title>Simple Publisher Hook</title>
     <simpara>The following example script ignores the packages that have changed and copies all
RPMs from the repository directory to a target directory:</simpara>
     <screen>#!/bin/bash
OBSHOME="/srv/obs"
SRC_REPO_DIR="$OBSHOME/repos"
LOGFILE="$OBSHOME/log/reposync.log"
$DST_REPO_DIR="/srv/repo-mirror"
# Global substitution! To handle strings like Foo:Bar:testing - two
#+double-colons!
PRJ_PATH=${1//:/:\/}
PATH_TO_REPO=$2
rsync -a --log-file=$LOGFILE $PATH_TO_REPO/ $DST_REPO_DIR/$PRJ_PATH/</screen>
     <simpara>For testing purposes, it can be invoked as follows:</simpara>
     <screen>$ sudo -u obsrun /usr/local/bin/publish-hook.sh Product/SLES11-SP1 \
    /srv/obs/repos/Product/SLE11-SP1</screen>
    </section>
    <section id="_advanced_publisher_hook">
     <title>Advanced Publisher Hook</title>
     <simpara>The following example script reads the destination path from a parameter that is configured with
the hook script:</simpara>
     <screen>#!/bin/bash
LOGFILE="/srv/obs/log/reposync.log"
DST_REPO_DIR=$1
# Global substion! To handle strings like Foo:Bar:testing - two
#+double-colons!
PRJ_PATH=${2//:/:\/}
PATH_TO_REPO=$3
mkdir -p $DST_REPO_DIR/$PRJ_PATH
rsync -a --log-file=$LOGFILE $PATH_TO_REPO/ $DST_REPO_DIR/$PRJ_PATH/</screen>
     <simpara>For testing purposes, it can be invoked as follows:</simpara>
     <screen>$ sudo -u obsrun /usr/local/bin/publish-hook.sh \
    /srv/www/public_mirror/Product/SLES11-SP1 \
    /srv/obs/repos/Product/SLE11SP1</screen>
     <simpara>The following example script only copies packages that have changed, but does not delete packages that have been removed:</simpara>
     <screen>#!/bin/bash

DST_REPO_DIR=$1
PRJ_PATH=${2//:/:\/}
PATH_TO_REPO=$3
shift 3

mkdir -p $DST_REPO_DIR/$PRJ_PATH

while [ $# -gt 0 ]
do
  dir=(${1//\// })
  if [ ! -d  "$DST_REPO_DIR/$PRJ_PATH/$dir" ]; then
    mkdir -p $DST_REPO_DIR/$PRJ_PATH/$dir
  fi
  cp $PATH_TO_REPO/$1 $DST_REPO_DIR/$PRJ_PATH/$1
  shift
done

createrepo $DST_REPO_DIR/$PRJ_PATH/.</screen>
     <simpara>For testing purposes, it can be invoked as follows:</simpara>
     <screen>$ sudo -o obsrun /usr/local/bin/publish-hook.sh  /srv/www/public_mirror \
   Product/SLES11-SP1 /srv/obs/repos/Product/SLE11-SP1 \
   src/icinga-1.13.3-1.3.src.rpm x86_64/icinga-1.13.3-1.3.x86_64.rpm \
   x86_64/icinga-devel-1.13.3-1.3.x86_64.rpm</screen>
    </section>
   </section>
  </section>
