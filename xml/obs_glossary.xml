<!DOCTYPE glossary
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- 
  ******* This is the official glossar of OBS terms                   ********
  ******* Please do not add new terms, if you are not sure that there ********
  ******* is a common aggrement on the meaning of this term           ********
  ******* Please post on the OBS mailing list your suggestion, if you ********
  ******* are unsure.                                                 ********
-->
<glossary version="5.1" xml:id="obs.glossary"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Glossary</title>

 <!-- ############## A ############## -->
 <glossentry xml:id="obs.glos.announcement">
  <glossterm>Announcement</glossterm>
  <glossdef>
   <para/>
   <remark>TBD</remark>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.appimage">
  <glossterm>&obs.ai;</glossterm>
  <!-- See https://en.opensuse.org/openSUSE:Build_Service_AppImage_builds -->
  <glossdef>
   <para>
    An application and its dependencies packaged as a single file which can
    run on many distributions without unpacking or installing.
   </para>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.appliance">
  <glossterm>Appliance</glossterm>
  <glossdef>
   <para>A preconfigured combination of an application
    (for example, a Web server), its configuration, and an operating system
    (for example, SUSE Linux Enterprise Server). All these
    parts are integrated into a single image and can be deployed on industry
    hardware or on a virtual environment. </para>
   <glossseealso otherterm="obs.glos.image"/>
   <glossseealso otherterm="obs.glos.kiwi"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.attribute">
  <glossterm>Attribute</glossterm>
  <glossdef>
   <para/>
   <remark>TBD</remark>
  </glossdef>
 </glossentry>
 <!-- ############## B ############## -->
 <glossentry xml:id="obs.glos.project_binary">
  <glossterm>Binary</glossterm>
  <glossdef>
   <para>
    One build results of OBS projects. <!--Binaries can
    be reused in an environment to build further binaries.--> Currently, OBS
    supports RPM, Deb, and all formats generated by <xref
     linkend="obs.glos.kiwi"/>. </para>
   <glossseealso otherterm="obs.glos.deb"/>
   <glossseealso otherterm="obs.glos.kiwi"/>
   <glossseealso otherterm="obs.glos.rpm"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.branch">
  <glossterm>Branch</glossterm>
  <glossdef>
   <para>
    Personal copy of another repository that lives on your home project.
    A branch allows you to make changes without affecting the original
    repository. You can either <!-- update,? -->delete the branch or
    merge it into the original repository with a submit request.
   </para>
   <glossseealso otherterm="obs.glos.submitrequest"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.bugowner">
  <glossterm>Bugowner</glossterm>
  <glossdef>
   <para/>
   <remark>TBD</remark>
   <glossseealso otherterm="obs.glos.maintainer"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.bugreporting">
  <glossterm>Bug Reporting</glossterm>
  <glossdef>
   <para/>
   <remark>TBD</remark>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.build">
  <glossterm>Build</glossterm>
  <glossdef>
   <para>
    Generating ready-to-publish binaries, usually for a specific distribution
    and architecture.
   </para>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.buildlog">
  <glossterm>Build Log</glossterm>
  <glossdef>
   <para>Output of the build process of a certain package.</para>
   <glossseealso otherterm="obs.glos.build"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.buildrecipe">
  <glossterm>Build Recipe</glossterm>
  <glossdef>
   <para>Generic term for a recipe file for creating a package.
    A build recipe includes metadata, instructions, requirements,
    and changelogs.
    For RPM-based systems like &suse;, a <filename>.spec</filename> file is
    used and contains all the previous points. Debian-based systems use
    a <filename>debian</filename> directory which splits all the information.
   </para>
   <glossseealso otherterm="obs.glos.spec"/>
<!--   <glossseealso otherterm=""obs.glos.debianrulefile"/>-->
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.buildresult">
  <glossterm>Build Result</glossterm>
  <glossdef>
   <para>The current state of a package. Example of a build result could be
   succeeded, failed, blocked, etc.</para>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.buildroot">
  <glossterm>Build Root</glossterm>
  <glossdef>
   <para>
    Directory where the &osccmd; command copies, patches, builds, and create
    packages. By default, the build root is located in
    <filename>/var/tmp/build-root/<replaceable>BUILD_TARGET</replaceable></filename>.
   </para>
   <glossseealso otherterm="obs.glos.buildtarget"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.buildtarget">
  <glossterm>Build Target</glossterm>
  <glossdef>
   <para>
    Specific operating systems and architecture to build for.
   </para>
  </glossdef>
 </glossentry>
 <!-- ############## C ############## -->
 <glossentry xml:id="obs.glos.commit">
  <glossterm>Commit</glossterm>
  <glossdef>
   <para>
    A record of a change to one or more files. Each record contains the revision,
    the author, the date and time, a commit checksum, an optional request number,
    and a log message.
   </para>
   <glossseealso otherterm="obs.glos.revision"/>
  </glossdef>
 </glossentry>
 <!-- ############## D ############## -->
 <glossentry xml:id="obs.glos.deb">
  <glossterm>Deb</glossterm>
  <glossdef>
   <para>
    A package format created and used by the Debian distribution.
   </para>
   <glossseealso otherterm="obs.glos.package"/>
   <glossseealso otherterm="obs.glos.rpm"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.description">
  <glossterm>Description</glossterm>
  <glossdef>
   <para/>
   <remark>TBD</remark>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.develproject">
  <glossterm>Devel Project</glossterm>
  <glossdef>
   <para>
    A set of related packages that share certain features. For example,
    the devel project <uri>devel:languages:python</uri> stores all packages
    related to the Python programming language.
   </para>
   <glossseealso otherterm="obs.glos.homeproject"/>
   <glossseealso otherterm="obs.glos.project"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.downloadrepository">
  <glossterm>Download Repository</glossterm>
  <glossdef>
   <para>
    An area containing built packages available for download and installation
    through &zypper; or &yast;. The download repository belongs to a project and
    is specific to a distribution.
    An example of a download repository could be
    <uri>http://download.opensuse.org/repositories/<replaceable>PROJECT</replaceable>/openSUSE_Tumbleweed/</uri>.
   </para>
  </glossdef>
 </glossentry>
 <!-- ############## E ############## -->
 <glossentry xml:id="obs.glos.eula">
  <glossterm>EULA</glossterm>
  <glossdef>
   <para>
    End User License Agreement. For software that needs a special license
    (usually non-open source) which the user needs to agree to before
    installing.
   </para>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.flag">
  <glossterm>Flags</glossterm>
  <glossdef>
   <para>
    A set of switches that determine the state of package or repository. This
    includes building, publishing, and generating debug information.
   </para>
  </glossdef>
 </glossentry>
 <!-- ############## G ############## -->
 <glossentry xml:id="obs.glos.ga_project">
  <glossterm>GA Project</glossterm>
  <glossdef>
   <para> The GA (general availability) project builds an initial release of a product. It gets frozen
    after releasing the product. All further updates get released via the <xref
     linkend="obs.glos.update_project"/> of this project. </para>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.gpgkey">
  <glossterm>GPG Key</glossterm>
  <glossdef>
   <para>
    An encryption key pair that in the context of OBS is used to verify the
    owner of the repository and packages.
   </para>
  </glossdef>
 </glossentry>
 <!-- ############## H ############## -->
 <glossentry xml:id="obs.glos.homeproject">
  <glossterm>Home Project</glossterm>
  <glossdef>
   <para>
    Working area in OBS for uploading and building packages. Each
    home project starts with <uri>home:USERNAME</uri>.
   </para>
   <glossseealso otherterm="obs.glos.project"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.homerepository">
  <glossterm>Home Repository</glossterm>
  <glossdef>
   <para/>
   <remark>TBD</remark>
   <glossseealso otherterm="obs.glos.project"/>
  </glossdef>
 </glossentry>
 <!-- ############## I ############## -->
 <glossentry xml:id="obs.glos.image">
  <glossterm>Image</glossterm>
  <glossdef>
   <para>The result of a &kiwi; build process.</para>
   <glossseealso otherterm="obs.glos.kiwi"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.imagedescription">
  <glossterm>Image Description</glossterm>
  <glossdef>
   <para>
    Specification to define an appliance built by KIWI. The image description
    is a collection of files directly used by &kiwi; (<filename>config.xml</filename> and
    <filename>*.kiwi</filename>), scripts, or configuration data to
    customize certain parts of the &kiwi; build process.
   </para>
   <glossseealso otherterm="obs.glos.kiwi"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.incident">
  <glossterm>Incident</glossterm>
  <glossdef>
   <para> Describes a specific problem and the
    required updates. If the problem exists for multiple code streams, one
    incident covers all of them. An incident is started by creating a
    maintenance incident project and the update get built here. </para>
  </glossdef>
 </glossentry>
 <!-- ############## K ############## -->
 <glossentry xml:id="obs.glos.kiwi">
  <glossterm>KIWI</glossterm>
  <glossdef>
   <para>
    An OS appliance builder.
    &kiwi; provides a complete operating system image solution. It can
    create images for Linux supported hardware platforms or for virtualization
    systems. </para>
   <glossseealso otherterm="obs.glos.image"/>
  </glossdef>
 </glossentry>
 <!-- ############## L ############## -->
 <glossentry xml:id="obs.glos.license">
  <glossterm>License</glossterm>
  <glossdef>
   <para>
    Written contract to specify permissions for use and distribution of software.
   </para>
   <glossseealso otherterm="obs.glos.project"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.link">
  <glossterm>Link</glossterm>
  <glossdef>
   <para>
    A concept that defines a relationship between a source and a
    target repository.
   </para>
   <glossseealso otherterm="obs.glos.project"/>
  </glossdef>
 </glossentry>
 <!-- ############## M ############## -->
 <glossentry xml:id="obs.glos.maintainer">
  <glossterm>Maintainer</glossterm>
  <glossdef>
   <para/>
   <remark>TBD</remark>
   <glossseealso otherterm="obs.glos.bugowner"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.maintenance_project" vendor="suse">
  <glossterm>Maintenance Project</glossterm>
  <glossdef>
   <para> A project without sources and binaries,
    defined by the maintenance team. Incidents are created as sub projects
    of this project. </para>
   <glossseealso otherterm="obs.glos.incident"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.maintenance_request">
  <glossterm>Maintenance Request</glossterm>
  <glossdef>
   <para/>
   <remark>TBD</remark>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.metadata">
  <glossterm>Metadata</glossterm>
  <glossdef>
   <para/>
   <remark>TBD</remark>
  </glossdef>
 </glossentry>
 <!-- ############## O ############## -->
 <glossentry xml:id="obs.glos.obs" sortas="Open Build Service">
  <glossterm>Open Build Service (OBS)</glossterm>
  <glossdef>
   <para>A Web service to build package or images from source.
    The Open Build Service (OBS) is used to speak about the
    server part of the build service. When speaking about OBS all possible
    instances are affected. </para>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.build.o.o">
  <glossterm>openSUSE Build Service</glossterm>
  <glossdef>
   <para> A specific Web service instance of <xref
     linkend="obs.glos.obs"/> from the openSUSE project at
    <link xlink:href="http://build.opensuse.org"/>. </para>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.osc">
  <glossterm>osc</glossterm>
  <glossdef>
   <para> A command line tool to work with an OBS instance. The acronym
    for the <command>osc</command> command is called <emphasis>openSUSE
     commander</emphasis>. The command line tool has a similar handling like
    SVN or Git.
   </para>
   <glossseealso otherterm="obs.glos.obs"/>
   <glossseealso><link xlink:href="https://github.com/openSUSE/osc"
   /></glossseealso>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.overlay_file">
  <glossterm>Overlay File</glossterm>
  <glossdef>
   <para>
    A directory structure with files and subdirectories used by &kiwi;.
    This directory structure is packaged as a file
    (<filename>root.tar.gz</filename>) or stored below a directory
    (named <filename>root</filename>).
    The contents of the directory structure is copied over the existing file
    system (overlayed) of the appliance root. This includes
    permissions and attributes as a supplement.
   </para>
   <glossseealso otherterm="obs.glos.appliance"/>
   <glossseealso otherterm="obs.glos.kiwi"/>
   <!--   <glossseealso otherterm="obs.glos.imagedescription"/>-->
  </glossdef>
 </glossentry>
 <!-- ############## P ############## -->
 <glossentry xml:id="obs.glos.package">
  <glossterm>Package</glossterm>
  <glossdef>
   <remark>
    This is a four-in-one glossary entry. Probably not ideal, but seemed like
    a good idea to keep the definitions together. Discuss with toms. FIXME. -
    sknorr, 2017-08-24
   </remark>
   <para>
    &obsa; handles multiple types of packages:
   </para>
   <itemizedlist>
    <listitem>
     <remark>
      "Binary package" poses a bit of a question: It is a bit unclear when a
      package can be considered binary: 1) all archive formats are pretty
      much always binary-based; 2) interpreted languages actually aren't
      binary. The term "installable package" comes to mind, however, but it
      is definitely not in common usage yet, unlike binary package.
      - sknorr, 2017-08-23
     </remark>
     <para>
      Binary Packages (such as &rpmf; packages or &debf; packages) contain an
      installable version of software and metadata, and can also include, for
      example, configuration files and documentation.
     </para>
    </listitem>
    <listitem>
     <para>
      Containers, similarly to binary packages, contain a usable version of
      software and metadata, and can also include, for example, configuration
      files and documentation. However, they cannot be installed, they can
      only be deployed. That is, they are copied onto the target system. They
      can then be run directly in that state. Container formats include
      &docker;, &appimg;, &snap;, &flatpak;.
     </para>
    </listitem>
    <listitem>
     <para>
      &obsa; packages contain the sources that are necessary to build one or
      more binary packages or containers. The content of &obsa; packages
      varies. In general, there is always a source file (such as a TAR
      archive of the upstream sources) and a build recipe.
     </para>
     <para>
      To build an &rpmf; package in &obsa;, you need a spec file as your
      build recipe, for example. An &obsa; package can also contain other
      files, such as a change log and patches.
     </para>
     <para>
      &obsa; packages, unlike the name <quote>package</quote> suggests, do
      not consist of a single file. Instead, they are directories of a
      version-controlled repository. However, unlike most directories, they
      cannot contain subdirectories. (You can use subdirectories to simplify
      your work with the checked-out package but you cannot submit these
      directories.)
     </para>
    </listitem>
    <listitem>
     <para>
      Source packages, for example, SRPMs, contain content similar to an
      &obsa; package but they use an archive format (such as CPIO for SRPMs)
      and are meant to allow outputting a single binary package or container
      format only. Source packages allow rebuilding a binary package or
      container outside of an &obs; context.
     </para>
    </listitem>
   </itemizedlist>
   <para>
   </para>
   <glossseealso otherterm="obs.glos.source"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.packagerepository">
  <glossterm>Package Repository</glossterm>
  <glossdef>
   <para>A place where installable packages are available. This can
   be either from a media like CD, DVD, or from a remote online
   repository.
   </para>
   <para>
    Official repositories can divided into oss software (licensed under
    an open source license) and non-oss (for software released under
    other. non-open source licenses). Additionally, there are update
    source, and debug repositories as well.
   </para>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.patch">
  <glossterm>Patch</glossterm>
  <glossdef>
   <para>
    A modification that can be applied to the source.
   </para>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.patchinfo">
  <glossterm>Patchinfo</glossterm>
  <glossdef>
   <para/>
   <remark>TBD</remark>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.project">
  <glossterm>Project</glossterm>
  <glossdef>
   <para>
    Unit which definies access control, repositories, architectures, and a
    set of packages containing sources.
   </para>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.projectconfiguration">
  <glossterm>Project Configuration</glossterm>
  <glossdef>
   <para>
    Settings define the project's properties.
   </para>
   <glossseealso otherterm="obs.glos.project"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.publishing">
  <glossterm>Publishing</glossterm>
  <glossdef>
   <para>
    Finished process when a package is successfully build and available in the
    download repository.
   </para>
   <glossseealso otherterm="obs.glos.downloadrepository"/>
  </glossdef>
 </glossentry>
 <!-- ############## R ############## -->
 <glossentry xml:id="obs.glos.release_project">
  <glossterm>Release Project</glossterm>
  <glossdef>
   <para> A release project is hosting a release repository which is not
    building any packages ever. It is only used to copy sources and binaries to
    this project on a release event.
   </para>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.repository">
  <glossterm>Repository</glossterm>
  <glossdef>
   <para>
     A distribution-specific area that holds dependencies required for
     building a package.
   </para>
   <glossseealso otherterm="obs.glos.downloadrepository"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.repofile">
  <glossterm>Repo File</glossterm>
  <glossdef>
   <para>
    A file with the name <filename><replaceable>PROJECT</replaceable>.repo</filename>.
    inside the download repository. The file contains information about the
    name of the repository, the repository type, and references to the download
    repository and the GPG key.
   </para>
   <glossseealso otherterm="obs.glos.downloadrepository"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.request">
  <glossterm>Request</glossterm>
  <glossdef>
   <para/>
   <remark>TBD</remark>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.requirements">
  <glossterm>Requirements</glossterm>
  <glossdef>
   <para>Package dependencies. Requirements are distinguished between:
   </para>
   <simplelist>
    <member>Build Requirements: these are dependencies that are needed
    to create or build a specific package. For example, a C++ program
    needs the C++ compiler included in the <package>gcc</package> package.
    </member>
    <member>Install Requirements: dependencies that are needed when the
    package is installed.</member>
   </simplelist>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.revision">
  <glossterm>Revision</glossterm>
  <glossdef>
   <para>A unique numberic identifier of a commit.</para>
   <glossseealso otherterm="obs.glos.commit"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.rpm">
  <glossterm>RPM</glossterm>
  <glossdef>
   <para>
    A package format. It stands for recursive acronym RPM Package Manager.
    Mainly used by SUSE, RedHat, u.a.
   </para>
   <glossseealso otherterm="obs.glos.deb"/>
   <glossseealso otherterm="obs.glos.package"/>
  </glossdef>
 </glossentry>
 <!-- ############## S ############## -->
 <glossentry xml:id="obs.glos.sandbox">
  <glossterm>Sandbox</glossterm>
  <glossdef>
   <para>Isolated region of a host system which runs either a virtual machine
    or a change root environment.
   </para>
   <glossseealso otherterm="obs.glos.buildroot"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.servicefile">
  <glossterm>Service File</glossterm>
  <glossdef>
   <para>
    An XML file that contains metadata required for building a package.
    This includes version information, upstream source repository, and
    actions.
   </para>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.spec">
  <glossterm>Spec File</glossterm>
  <glossdef>
   <para>
    A file that contains metadata and build instructions. Metadata includes
    a general package description and dependencies required for
    building and installing the package.
   </para>
   <glossseealso otherterm="obs.glos.buildrecipe"/>
   <glossseealso otherterm="obs.glos.patch"/>
   <glossseealso otherterm="obs.glos.source"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.statusmonitor">
  <glossterm>Status Monitor</glossterm>
  <glossdef>
   <para/>
   <remark>TBD</remark>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.source">
  <glossterm>Source</glossterm>
  <glossdef>
   <para>
    Original form, mostly written in a computer language.
   </para>
   <glossseealso otherterm="obs.glos.package"/>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.sourcelink">
  <glossterm>Source Link</glossterm>
  <glosssee otherterm="obs.glos.link"/>
 </glossentry>
 <glossentry xml:id="obs.glos.susepackagehub">
  <glossterm>&suse; Package Hub</glossterm>
  <glossdef>
   <para>
    An &obsa; project reachable under <uri>openSUSE:Backports</uri>.
    It is a subset of openSUSE Factory which does not contain version
    updates and does not conflict with official packages supported by &sle;.
   </para>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.systemstatus">
  <glossterm>System Status</glossterm>
  <glossdef>
   <para/>
   <remark>TBD</remark>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.submitrequest">
  <glossterm>Submit Request</glossterm>
  <glossdef>
   <para>
    Asking for integrating changes from a branched project.
   </para>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.subproject">
  <glossterm>Subproject</glossterm>
  <glossdef>
   <para>A child of a parent project.</para>
   <glossseealso otherterm="obs.glos.develproject"/>
   <glossseealso otherterm="obs.glos.homeproject"/>
   <glossseealso otherterm="obs.glos.project"/>   
  </glossdef>
 </glossentry>
 <!-- ############## T ############## -->
 <glossentry xml:id="obs.glos.target">
  <glossterm>Target</glossterm>
  <glossdef>
   <para>
    A specific distribution and architecture, for example,
    &tw; for x86-64. Also referenced as
    <emphasis>build target</emphasis>.
   </para>
  </glossdef>
 </glossentry>
 <!-- ############## U ############## -->
 <glossentry xml:id="obs.glos.update_project">
  <glossterm>Update Project</glossterm>
  <glossdef>
   <para> A project which provides official updates for the products generated
    in the <xref linkend="obs.glos.ga_project"/>. The update project usually
    links sources and repositories against the <xref
     linkend="obs.glos.ga_project"/>.
   </para>
   <glossseealso otherterm="obs.glos.release_project"/>
   <glossseealso otherterm="obs.glos.ga_project"/>
  </glossdef>
 </glossentry>
 <!-- ############## W ############## -->
 <glossentry xml:id="obs.glos.watchlist">
  <glossterm>Watchlist</glossterm>
  <glossdef>
   <para>
    A list of repositories that the user is interested in, available in the
    &obsa; Web UI.
   </para>
  </glossdef>
 </glossentry>
 <glossentry xml:id="obs.glos.workingcopy">
  <glossterm>Working Copy</glossterm>
  <glosssee otherterm="obs.glos.workingdirectory"/>
 </glossentry>
 <glossentry xml:id="obs.glos.workingdirectory">
  <glossterm>Working Directory</glossterm>
  <glossdef>
   <para>
    A directory on your local machine as a result from a <command>osc checkout</command>
    call for working and building before submitting your changes to an
    &obsa; instance. 
   </para>
  </glossdef>
 </glossentry>
 <!-- ############## Z ############## -->
 <glossentry xml:id="obs.glos.zypper">
  <glossterm>&zypper;</glossterm>
  <glossdef>
   <para>
    A command line package manager to access repositories, solve dependencies,
    install packages, and more.
   </para>
  </glossdef>
 </glossentry>
</glossary>
