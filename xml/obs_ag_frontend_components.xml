<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC
  "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.docbook.org/xml/4.5/docbookx.dtd"
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
  <section id="_frontend_components">
   <title>Frontend Components</title>
   <simpara>The term frontend refers to the OBS components that allow users to interact with the backend services. Typically, this is considered to include an SQL database, a webserver, the OBS API and the WebUI.</simpara>
   <section id="_database_server">
    <title>Database server</title>
    <simpara>The OBS requires an SQL database for persistent data and a memcache daemon for volatile data. Typically, production instances of OBS are run on MySQL or MariaDB though you can even use SQLite3 for development/testing.</simpara>
    <simpara>It is recommended to call mysql_secure_installation to make the installation more secure. The script asks to set a password for the root user, removes anonymous users and the test database.</simpara>
    <simpara>The database connection is configured in the /srv/www/obs/api/config/database.yml configuration file:</simpara>
    <screen>production:
adapter: mysql2
database: api_production
username: root
password: opensuse
encoding: utf8
timeout: 15
pool: 30</screen>
    <simpara>When the database has been created and configured, its content can be deployed:</simpara>
    <screen># cd /srv/www/obs/api
# sudo RAILS_ENV="production" rake db:setup
After that the default configuration.xml for some API functionality and WebUI appear-
ance can be created:
# sudo RAILS_ENV="production" rake writeconfiguration
As the commands were called with root privileges, check the ownership for the directories
log and tmp:
# cd /srv/www/obs/api
# sudo chown -R wwwrun.www log tmp</screen>
   </section>
   <section id="_web_server_apache">
    <title>Web server (Apache)</title>
    <simpara>The OBS web frontend is a Ruby on Rails application that manages the access and manipulation of the OBS data via the API. The Ruby on Rails application is run through the apache web server with mod_passenger. You can control it via the standard systemctl commands:</simpara>
    <screen>systemctl {start, stop, restart} apache2</screen>
    <simpara>The apache2 web server needs some modules to run the Open Build Service API and web
interface. These can be activated using the a2enmod command:</simpara>
    <screen>a2enmod passenger
a2enmod rewrite
a2enmod proxy
a2enmod proxy_http
a2enmod xforward
a2enmod headers
a2enflag SSL</screen>
    <simpara>The Open Build Service API and web interface are served through a secured HTTP con-
nection, therefore an SSL certificate has to be created. To create a self-signed certificate for
testing, these commands can be used:</simpara>
    <screen># mkdir /srv/obs/certs
# openssl genrsa -out /srv/obs/certs/server.key 1024
# openssl req -new -key /srv/obs/certs/server.key \
  -out /srv/obs/certs/server.csr
# openssl x509 -req -days 30 -in /srv/obs/certs/server.csr -signkey \
  /srv/obs/server.key -out /srv/obs/server.crt</screen>
   </section>
   <section id="_api">
    <title>API</title>
    <simpara>The OBS frontend provides an XML API for interacting with the backend. Various clients can use this API to control the OBS instance. It can be used to create, read, update and delete users, projects/packages, requests and other objects. Currently, the two main client applications that use the API are the WebUI and the command line client (osc). The frontend service also provides the access control logic for the API service and, therefore, for the command line client and the WebUI. There are also additional sub-systems for search and email notifications.</simpara>
    <simpara>The OBS API is RESTFul API. As such, you can interact with it directly using curl - see <ulink url="https://en.opensuse.org/openSUSE:Build_Service_Curl">https://en.opensuse.org/openSUSE:Build_Service_Curl</ulink> for some examples. However, most people will use one of the standard clients - either the WebUI or osc.</simpara>
    <simpara>The osc commandline client gives access to most functions of the Build Service. It is the recommended tool for the daily packaging work.
osc is written in Python, and in addition to the command-line interface, it also provides a Python module for use by other Python programs.</simpara>
    <simpara>The API also makes it possible to link remote OBS instances. The OBS interconnect is a mechanism to connect two OBS instances. All content, including sources and binary build results will be available in the connecting instance. Unlike other methods, the instances will also notify each other about changes. All the collaboration tools also work with interconnected OBS instances. The reference server for the Open Build Service project, build.opensuse.org, currently has connections from 90 other instances. This feature is useful if you want to have different OBS instances for different architectures or distributions. You could also have proprietary sources that must not leave the company built against a public distribution.</simpara>
   </section>
   <section id="_webui">
    <title>WebUI</title>
    <simpara>The OBS web frontend is a Ruby on Rails application that manages the access and manipulation of the OBS data.
Since OBS version 2.5 the WebUI is the same Ruby on Rails application as the API, only a different view.</simpara>
   </section>
  </section>
