<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.1" xml:id="cha.obs.basicworkflow"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" >
 <title>Knowing the Basic Workflow</title>
 <para>TBD</para>
<!--
 <sect1>
  <title>Handling Dependencies</title>
  <para>TBD</para>
 </sect1>
-->
 <sect1 xml:id="sec.obs.basicworkflow.setuphome">
  <title>Setting Up Your Home Project for the First Time</title>
  <para>TBD</para>
  <remark>toms 2017-08-22: explain:
   1) osc ls / 2) osc prj -e home:OBS_USER  3) </remark>
 </sect1>

 <sect1>
  <title>Creating a New Package</title>
  <para>
   This section covers how to create packages from a project hosted on &gh;
   (the <quote>upstream project</quote>). We assume that this project contains source code
   which you want to package for different &suse; distributions.
  </para>
  <itemizedlist>
   <listitem>
    <para>First time setup of your home project is already done.
     <remark>toms 2017-08-22: TODO: Add link</remark>
    </para>
   </listitem>
   <listitem>
    <para>Check out of your home project is </para>
   </listitem>
  </itemizedlist>
  <para>
   To create a package from the upstream project, do the following:
  </para>
  <procedure>
   <title>General Procedure to Build a RPM Package</title>
   <step>
    <para>
     Open a shell. Choose or create a directory on your system in a partition
     that has enough space to hold the package sources.
    </para>
   </step>
   <step>
    <para>
     Prepare your <firstterm
      baseform="Working Directory">working directory</firstterm>:
    </para>
    <substeps>
     <step>
    <para>
     Check out your home project:
    </para>
    <screen>&prompt.user;<command>osc</command> checkout &obshome1;</screen>
    <para>
     This will create <filename>&obsworkdir1;</filename> in the
     current directory.
    </para>
   </step>
   <step>
    <para>Create a new package inside your local working directory:
    </para>
    <screen>&prompt.user;<command>cd</command> &obsworkdir1;
&prompt.user;<command>osc</command> mkpac <replaceable>YOUR_PROJECT</replaceable></screen>
   </step>
   </substeps>
   </step>
   <step>
    <para>
     Get the pristine source code of the upstream project and save it in
     <filename>&obsworkdir1;/<replaceable>YOUR_PROJECT</replaceable></filename>.
    </para>
    <para>
     Download the sources from your upstream project.
    </para>
   </step>
   <step>
    <para>
     Create a <firstterm baseform="Spec File">spec file</firstterm> which
     contains metadata and build instructions.
     If you need more information about RPM spec files, see
     <link xlink:href="http://rpm-guide.readthedocs.io/en/latest/"/>.
    </para>
   </step>
   <step>
    <para>Create a new changelog and add your changes:</para>
    <substeps>
     <step>
      <para>Create a new changelog file with &osccmd;:</para>
      <screen>&prompt.user;<command>osc</command> vc</screen>
      <para>The command will open an editor with the following content:</para>
      <screen>-------------------------------------------------------------------
Fri Aug 23 08:42:42 UTC 2017 - &exampleuser_mail;</screen>
     </step>
     <step>
      <para>Enter your changes in the changelog file.</para>
      <para>
       Usually, the changelog entry contains some high-level overview like:
      </para>
      <remark>toms 2017-08-22: TODO: Move content into concept part?</remark>
      <itemizedlist>
       <listitem>
        <formalpara>
         <title>Version Updates</title>
         <para>
          Provide a general overview of new features or changes in behavior
          of the package.
         </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>Bug Fixes</title>
         <para>
          Anytime a bug was fixed, mention the bug number. It is highly
          recommended to add a prefix before the number so people can identify
          the bug tracker. For example, <literal>bsc</literal> for
           <uri>bugzilla.suse.com</uri>, <literal>fate</literal>
           (<uri>fate.suse.com</uri>), <literal>kde</literal>
           (<uri>bugs.kde.org</uri>) etc.
         </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>API Changes</title>
         <para>
          Whenever the user or developer needs to be aware of
          incompatible changes the requires the user to adapt their
          configurations.
         </para>
        </formalpara>
       </listitem>
       <listitem>
        <formalpara>
         <title>Distribution Related Changes</title>
         <para>
          Like any changes in the package structure, renaming of package
          names, adding or removing patch files, or specific
           <quote>hacks</quote>.
         </para>
        </formalpara>
       </listitem>
      </itemizedlist>
      <para>
       Find more information about the changelog at <link
        xlink:href="https://en.opensuse.org/openSUSE:Creating_a_changes_file_(RPM)"
       />.
      </para>
     </step>
    </substeps>
   </step>
   <step>
    <para>Add all the files to your working directory:</para>
    <screen>&prompt.user;<command>osc</command> add *.spec *.changes *.tar.gz</screen>
   </step>
   <step>
    <para>Build the package for a specific distribution and architecture,
     for example, Tumbleweed for x86_64:</para>
    <screen>&prompt.user;<command>osc</command> build --local-package <!--
-->openSUSE_Tumbleweed x86_64 *.spec
    </screen>
    <para>
     If you encounter problems, see <xref linkend="sec.obs.basicworkflow.builderrors"/>.
    </para>
   </step>
   <step>
    <para>
     Check if your build was successful. If everything was fine, commit the
     files to your package to your home project on &obsa;:</para>
    <screen>&prompt.user;<command>osc</command> commit</screen>
   </step>
  </procedure>
 </sect1>

 <sect1 xml:id="sec.obs.basicworkflow.builderrors">
  <title>Investigating the Local Build Process</title>
  <remark>toms 2017-08-22: https://en.opensuse.org/openSUSE:Build_Service_Tutorial#Correct_Errors_in_the_Local_Build_Process</remark>
  <para>
   It is hard to describe a general procedure when you encounter a build
   error. Most build errors are very specific to the package being built.
   However, once you are hit by one, you can try the following options:
  </para>
  <itemizedlist>
   <listitem>
    <para><xref linkend="sec.obs.basicworkflow.builderrors.buildlog"/></para>
   </listitem>
   <listitem>
    <para><xref linkend="sec.obs.basicworkflow.builderrors.buildroot"/></para>
   </listitem>
  </itemizedlist>

  <remark>toms 2017-08-22: Troubleshooting?</remark>

  <sect2 xml:id="sec.obs.basicworkflow.builderrors.buildlog">
   <title>Build Log</title>
   <para>
    Each build produces a log file on &obsa;. This log file can be viewed by
    the <command>buildlog</command> (or <command>bl</command>) subcommand.
    It needs a build target which is the distribution and the architecture.
   </para>
   <para>
    For example, to view the build log of your current project
    for &opensuse; Tumbleweed on a 64bit architecture, use:
    use:
   </para>
   <screen>&prompt.user;<command>osc</command> buildlog openSUSE_Tumbleweed x86_64</screen>
   <para>
    However, this command will print the complete build log which could be
    difficult to spot the errors. Use the <command>buildlogtail</command>
    subcommand to show only the end of the logfile:
   </para>
   <screen>&prompt.user;<command>osc</command> buildlogtail openSUSE_Tumbleweed x86_64</screen>
  </sect2>

  <sect2 xml:id="sec.obs.basicworkflow.builderrors.buildroot">
   <title>Local Build Root Directory</title>
   <para>
    If you build a package locally and you get a build error, investigate
    the problems in the build root directory directly. This is sometimes
    easier and more effective than just looking at the build log.
   </para>
   <para>
    By default, the directory <filename>/var/tmp/build-root/</filename>
    is used as the <emphasis>build root</emphasis>. It is definied in
    the configuration file <filename>~/.oscrc</filename>, search for the
    key <option>build-root</option>.
    Each combination of distribution and architecture has its own build
    root. To change into the build root for &opensuse; Tumbleweed on a
    64bit architecture, use the following command
    (you have to entered the &rootuser; password):
   </para>
   <screen>&prompt.user;<command>osc</command> chroot openSUSE_Tumbleweed x86_64</screen>
   <para>
    After you have entered the &rootuser; password, your current directory
    is changed to <filename>/home/abuild</filename> belonging to user
    <systemitem class="username">abuild</systemitem> in group <systemitem
     class="groupname">abuild</systemitem>.
   </para>
   <remark>toms 2017-08-22: This should be moved into the concepts part</remark>
   <para>
    The build root contains the following structure:
   </para>
   <example xml:id="exa.workflow.buildroot">
    <title>Directory Structure of a Build Root (<filename>/var/tmp/build-root/</filename>)</title>
    <screen>/home/abuild/
└── rpmbuild
    ├── BUILD <co xml:id="co.workflow.buildroot.build"/>
    ├── BUILDROOT  <co xml:id="co.workflow.buildroot.buildroot"/>
    ├── OTHER  <co xml:id="co.workflow.buildroot.other"/>
    ├── RPMS  <co xml:id="co.workflow.buildroot.rpms"/>
    │   ├── i386
    │   ├── noarch
    │   └── x86_64
    ├── SOURCES  <co xml:id="co.workflow.buildroot.sources"/>
    ├── SPECS  <co xml:id="co.workflow.buildroot.specs"/>
    └── SRPMS  <co xml:id="co.workflow.buildroot.srpms"/></screen>
    <remark>toms 2017-08-22: http://rpm-guide.readthedocs.io/en/latest/rpm-guide.html#rpm-packaging-workspace</remark>
    <calloutlist>
     <callout arearefs="co.workflow.buildroot.build">
      <para>
       Contains directory named after the package name.
       In spec files, the name of the package directory is referenced
       as the <systemitem class="macro">%buildroot</systemitem> macro.
      </para>
     </callout>
     <callout arearefs="co.workflow.buildroot.buildroot">
      <para>
       If the build process was unable to create a package, this directory
       contains all files and directories which are installed in the target
       system through the <systemitem class="macro">%install</systemitem>
       section of the spec file.
      </para>
      <para>
       If the package has been successfully built, this directory will be
       emptied.
      </para>
     </callout>
     <callout arearefs="co.workflow.buildroot.other">
      <para>
       Contains usually the file <filename>rpmlint.log</filename>.
      </para>
     </callout>
     <callout arearefs="co.workflow.buildroot.rpms">
      <para>
       Stores binary RPMs into subdirectories of achitecture
       (for example <filename>noarch</filename> or
       <filename>x86_64</filename>) if the build was successful.
      </para>
     </callout>
     <callout arearefs="co.workflow.buildroot.sources">
      <para>
       All source files from the working copy will be copied here.
      </para>
     </callout>
     <callout arearefs="co.workflow.buildroot.specs">
      <para>
      <remark>toms 2017-08-22: empty?</remark>
      </para>
     </callout>
     <callout arearefs="co.workflow.buildroot.srpms">
      <para>
       Stores source RPMs into this directory.
      </para>
     </callout>
    </calloutlist>
   </example>
  </sect2>
 </sect1>

 <sect1>
  <title>Linking and Aggregating Packages</title>
  <para>TBD</para>
 </sect1>
</chapter>
