<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
  type="text/xml"
  title="Profiling step"?>
<!DOCTYPE article
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<!--
Integrate the following blogs?
https://www.suse.com/communities/blog/open-build-service-create-image-template/
https://www.suse.com/communities/blog/suse-studio-integration/
-->

<article version="5.1" xml:lang="en" xml:id="art.obs.bg"
 xmlns="http://docbook.org/ns/docbook" xmlns:dm="urn:x-suse:ns:docmanager"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Beginner ºs Guide</title>
 <subtitle>&productname; &productnumber;</subtitle>
 <info>
  <productname>&obs;</productname>
  <xi:include href="common_copyright_opensuse.xml"/>
  <abstract>
   <para>
    This guide describes basic workflows for working with packages on
    &obs;. It covers checking out a package from an upstream project,
    creating patches, branching a repository, and more.
   </para>
  </abstract>
 </info>

 <sect1 xml:id="sec.obsbg.targetaudience">
  <title>Target Audience</title>
  <para>
   This document is intended for interested users and developers who want to
   build packages from source code for different distributions.
   Basic knowledge of Linux and usage of the command line<!--, and package building--> is
   recommended.
  </para>
  <remark>toms 2017-08-03: Add some links to basic tutorials etc.?</remark>
 </sect1>

 <sect1 xml:id="sec.obsbg.concept">
  <title>Conceptual Overview</title>
  <para>
   Created in 2005, the &obs; (&obsa;) is a generic system to build and
   distribute packages or images from source code in an automatic, consistent
   and reproducible way.
   &obsa; can create images and installable packages for a wide range
   of operating systems
   (&suse;, Debian, Ubuntu, RedHat, Windows, etc.) and hardware architectures
   (&x86;, &amd64;, &zseries;, &ppc; etc.).
  </para>
  <sect2 xml:id="sec.obsbg.concept.pkgspec">
   <title>Package Specification</title>
   <para>To create a package in &obsa;, you need a <firstterm>package specification</firstterm>
    which contains the following information:
   </para>
   <itemizedlist>
    <listitem>
     <formalpara>
      <title>Metadata</title>
      <para>The package name and the description are mandatory. Other data
       such as the version, the license, the upstream URL
       is optional.</para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>Requirements</title>
      <para>
       Packages depend on other packages to function properly.
       There are two types of requirements:
       <emphasis>build requirements</emphasis> and
       <emphasis>installation requirements</emphasis>.
      </para>
     </formalpara>
     <para>
      Build requirements are dependencies which are needed during the
      build process in &obsa;. For example, a C++ program needs
      a C++ compiler.
     </para>
     <para>
      Installation requirements are dependencies which are needed when installing
      the final package.
     </para>
    </listitem>
    <listitem>
     <formalpara>
      <title>A Package List</title>
      <para>
       To successfully install and remove a package with all its contents,
       the package manager needs to know which files and directories belong to
       which package.
      </para>
     </formalpara>
    </listitem>
   </itemizedlist>
   <para>
    For RPM-based operating systems such as &opensuse;, &sle;, or &rhel;, all
    the information above is included
    in a file with the file extension <filename
     class="extension">.spec</filename>.
   </para>
  </sect2>
  <sect2 xml:id="sec.obsbg.buildhost">
   <title>Build Hosts and Packages</title>
  <para>
   The &obsa; server provides a Web interface and an API. The API is
   used by the &osccmd; command line tool.
  </para>
  <para>
   To build the package, the back-end creates a sandbox with
   the respective distribution on demand. This sandbox is isolated from
   the rest of the host system.
   Depending on the &packspec; (on RPM-based systems, this is a
   <firstterm>spec file</firstterm>), other packages
   are downloaded and installed prior to building.
  </para>
  <para>
   The build process itself executes all the instructions inside the &packspec;.
   If the build is successful, the files which belong to the package
   are installed into the sandbox. From those sandboxed files, the final RPM
   package is created and moved into a download area (the
   <emphasis>download repository</emphasis>).
  </para>
  <para>
   The package is then publicly available and can be installed. In the case
   of an RPM package for a &suse;-based system, you would use &yast; or
   Zypper as the installation tool.
  </para>
  <para>
   Other services around &obsa; (like the notification server, mirror
   interface etc.) are relatively specific in purpose and therefore of lesser
   importance for this guide.
  </para>
  <para>
   The schematic in <xref linkend="fig.obsbg.concept"/> shows the components
   in context.
  </para>
  <figure xml:id="fig.obsbg.concept">
   <title>Conceptual Overview of &obs;</title>
   <mediaobject>
    <imageobject>
     <imagedata width="80%" fileref="obs-concept.svg"/>
    </imageobject>
   </mediaobject>
  </figure>
  </sect2>
  <sect2 xml:id="sec.obsbg.project">
   <title>Projects and Packages</title>
   <para>
    In &obsa;, packages are organized in <emphasis>projects</emphasis>.
    A single project can contain several packages and usually serves a specific
    organizational purpose. Generic access control, related repositories, and
    build targets (operating systems and architectures) are all defined at
    the project level.
   </para>
   <para>
    Projects can also have other projects (subprojects) to structure work.
    They are isolated from their parents project and can be configured
    independently.
   </para>
   <para>
    Each project name is separated by colons.
    For example, in the &opensuse; Build Service, packages for fonts are
    collected in the project
    <uri>M17N:fonts</uri> which is a subproject of <uri>M17N</uri>.
    Packages for the Python programming
    language are available in the <uri>devel:languages:python</uri> project
    which is a subproject of <uri>devel:languages</uri> which itself is a
    subproject of <uri>devel</uri>.
   </para>
   <para>
    As a user, you will normally build packages in your
    <firstterm baseform="Home Project">home project</firstterm>, available
    in &obsa; as <uri>home:<replaceable>USERNAME</replaceable></uri>.
    Home projects serve as a personal working area in &obsa; to define build
    targets, upload, build, and download packages. Users are also permitted
    to create subprojects f 
    temporary
    subprojects to work on other people's packages. 
   </para>
   <para>
    Sometimes, you will see the <uri>obs://<replaceable
     >DOMAIN</replaceable>/<replaceable>PROJECT</replaceable></uri>
    notation. The <uri>obs://</uri> schema is a shorthand to abbreviate the
    long URL and needs to be replaced by the real &obsa; instance URL.
   </para>
  </sect2>
 </sect1>

 <sect1 xml:id="sec.obsbg.req">
  <title>Requirements for Working with &osccmd; on the Command Line</title>
  <para>
   Before you work with &obs;, make sure you fulfill the following requirements.
  </para>
  <variablelist>
   <varlistentry xml:id="vle.obsbg.req.software">
    <term>Software Requirements</term>
    <listitem>
     <para>
      To work with &obs;, install the &osccmd; command line tool from your
      preferred distributions or from the &obsa; project
       <uri>openSUSE:Tools</uri>. The tool runs on any modern Linux system and
      is available for different distributions, such as CentOS, Debian, &sle;,
      &opensuse;.
     </para>
     <itemizedlist>
      <listitem>
       <para>
        For &suse; related systems, install the <package>osc</package>
        package with the <command>zypper</command> command (replace
        <replaceable>DISTRIBUTION</replaceable> with your distribution):
       </para>
       <screen>&prompt.root;<command>zypper</command> ar &obsrepourl;/openSUSE:/Tools/<replaceable>DISTRIBUTION</replaceable>/openSUSE:Tools.repo
&prompt.root;<command>zypper</command> install osc</screen>
      </listitem>
      <listitem>
       <para>
        For other systems, use your preferred package manager.
       </para>
      </listitem>
      <listitem>
       <para>
        As an alternative, use the &appimg; file. An &appimg; file
        is a packaged application which can run on many distributions.
        Download the file, save it in your <filename>~/bin</filename> directory,
        and make the file executable.
       </para>
      </listitem>
     </itemizedlist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Hardware Requirements</term>
    <listitem>
     <para>
      Make sure you have a minimum of 1 GB of disk space available. The
      &osccmd; command builds all packages locally under
      <filename>&oscbuildpath;</filename> and
      caches downloaded packages under <filename>&oscbuildcache;</filename>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

 <sect1 xml:id="sec.obsbg.obsconfig">
  <title>Configuring Your System for &obsa;</title>
  <para>
   You can use the <command>osc</command> command without configuring your
   system as described in this section. However, we recommend preparing
   your system with <command>sudo</command>.
  </para>
  <para>
   At some point, you need to enter the &rootuser; password. This can be
   annoying if you rebuild packages frequently. Therefore, the configuration
   below customizes
   the <command>sudo</command> configuration to allow building packages
   without entering the &rootuser; password. To maximize security, only
   specific users are allowed.
  </para>

  <para>
   To customize <command>sudo</command>, execute the following steps:
  </para>
  <procedure xml:id="pro.obsbg.obsconfig">
   <title>Configuring <command>sudo</command></title>
   <para>
     The following configuration allows all users which belong to the group
     <systemitem class="groupname">osc</systemitem> to build packages without
     entering the &rootuser; password.
    </para>
     <step>
      <para>Log in as &rootuser; and create a new group <systemitem
       class="groupname">osc</systemitem>.
       This group will contain all users which are allowed to build packages: </para>
      <screen>&prompt.root;<command>groupadd</command> osc</screen>
     </step>
     <step xml:id="st.oscbg.usermod">
      <para>Add users to your newly created group <systemitem class="groupname"
        >osc</systemitem> which are allowed to build packages:
      </para>
      <screen>&prompt.root;<command>usermod</command> -a -G osc &exampleuser_plain; &exampleuserII_plain;</screen>
      <remark>
       Does not work with two users. If you want two users (bob and alice),
       you also need two commands (afaict after just trying this). - sknorr,
       2017-08-17
      </remark>
     </step>
     <step>
      <para>Run <command>visudo</command> to create the sudoers file
       <filename>/etc/sudoers.d/osc</filename>:</para>
      <screen>&prompt.root;<command>visudo</command> -f /etc/sudoers.d/osc</screen>
     </step>
     <step>
      <para>
       Add the following lines to create a command alias which only the
       group <systemitem class="groupname">osc</systemitem> is allowed
       to execute:
      </para>
      <screen># sudoers file "/etc/sudoers.d/osc" for the osc group
Cmnd_Alias  OSC_CMD = /usr/bin/osc, /usr/bin/build
%osc  ALL = (ALL) NOPASSWD:OSC_CMD</screen>
     </step>
     <step>
      <para>Log out of your system and log in again to make your changes
       effective.
      </para>
     </step>
   <step>
    <para>Create a new &obsa; configuration file:</para>
    <screen>&prompt.user;<command>osc</command> ls &obshome1;</screen>
    <para>
       If you run the command for the first time, you will be prompted
       for your &obsa; user name and your &obsa; password.
      </para>
   </step>
  </procedure>

  <note>
   <title>Alternative Directory Structure</title>
  <para>
   Optionally, if you prefer to separate projects and subprojects in
   directories and subdirectories, change the following line in your
   configuration file <filename>~/.oscrc</filename>: </para>
  <screen>checkout_no_colon = 1</screen>
  <para>
   This will use an alternate layout when checking out a project. For
   example, setting the option above and checking out the home project will
   lead to a directory structure <filename>home/&obsuser1;</filename>
   instead of the single directory <filename>&obshome1;</filename>. 
  </para>
  <para>
   However, in this guide, the default configuration with colons is used.
  </para>
  </note>
 </sect1>

 <sect1 xml:id="sec.obsbg.usagescenarios">
  <title>Covered Scenarios</title>
  <para>
   This guide assumes:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     At least a passing familiarity with version control systems such as Git
     and Subversion (SVN). Not only will Git be used for some aspects of this
     guide, many &obsa; concepts are modeled after their Subversion (SVN)
     equivalents.
    </para>
   </listitem>
   <listitem>
    <para>
     You are using the &osbs; at <link xlink:href="https://build.opensuse.org"/>.
     If you are using another &obsa; instance, some commands may differ.
    </para>
   </listitem>
   <listitem>
    <para>You have an account on an &obs; instance.</para>
   </listitem>
   <listitem>
    <para>An RPM-based operating system like &opensuse; or &sle;.</para>
   </listitem>
   <listitem>
    <para>A customized system as shown in <xref
     linkend="sec.obsbg.obsconfig"/>.</para>
   </listitem>
  </itemizedlist>
  <para>In all examples, we use:</para>
  <itemizedlist>
   <listitem>
    <para>
     A user on a local machine (you) who will be called &exampleuser; who
     builds packages on their own machine.
    </para>
   </listitem>
   <listitem>
    <para>
     An &obsa; user who will be called <systemitem class="username"
     >&obsuser1;</systemitem> and their home <uri>&obshome1;</uri> on the &obs;.
     This person is the same as the system user &exampleuser;, that is, you.
    </para>
   </listitem>
   <listitem>
    <para>An &obsa; user <systemitem class="username"
     >&obsuser2;</systemitem> and their home <uri>&obshome2;</uri> on &obs;.
     This person will act as a collaborator.
    </para>
   </listitem>
   <listitem>
    <para>
     An example upstream open source project available at <link
      xlink:href="&gitupstream1;"/>. This project is used as an example and
     contains source code in the C++ programming language.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   This guide describes the following common tasks:
  </para>
  <variablelist>
   <varlistentry>
    <term><xref linkend="sec.obsbg.uc.setuphome"/></term>
    <listitem>
     <para>
      Setting up a home project using the &obsa; Web UI.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><xref linkend="sec.obsbg.uc.newprj"/></term>
    <listitem>
     <para>
      Creating packages from a basic project hosted on &gh;.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><xref linkend="sec.obsbg.uc.patching"/></term>
    <listitem>
     <para>
      Patching source code without touching the original
      source.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><xref linkend="sec.obsbg.uc.branchprj"/></term>
    <listitem>
     <para>
      Branching a project, making changes, and submitting back
      the changes to the original project.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><xref linkend="sec.obsbg.uc.install-from-obs"/></term>
    <listitem>
     <para>
      Integrating the download repository into your system
      and how to install your built package.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

 <sect1 xml:id="sec.obsbg.uc.setuphome">
  <title>Setting Up Your Home Project for the First Time</title>
  <para>
   This section shows how to set up your home project after
   creating an &opensuse; account.
  </para>
  <para>
   When you log in to your home project for the first time, it will be empty.
   To build
   packages, you need to select build targets (operating systems and
   architectures) first.
   Build targets are defined project-wide and every package in a project is
   built for each build target. However, you can disable build targets for a
   specific package.
  </para>
  <para>To set up a home project, do the following:</para>
  <procedure xml:id="pro.obsbg.uc.setuphome.addrepo">
   <title>Adding Global Build Targets to Your Home Project</title>
   <step>
    <para>
     Log in to the &obs; instance.
    </para>
   </step>
   <step>
    <para>
     Click the <guimenu>Home Project</guimenu> link in the upper right
     corner.
    </para>
   </step>
   <step>
    <para>
     Click the <guimenu>Repositories</guimenu> tab, then the 
     <guimenu>Add Repositories</guimenu> link.
    </para>
   </step>
   <step>
    <para>
     Select the distributions you want to build for.</para>
    <para>
     &obsa; shows several Linux distributions. For &suse; distributions,
     we recommended to activate at least &tw;
     and the latest &leap; release.
     If you like, you can also mark one of the <guimenu>openSUSE Backports for SLE 12</guimenu>
     which enables package builds for &sle;.
    </para>
    <para>
     When you select a distribution, &obsa; will show a message
     that it has successfully added it to your home project.
    </para>
   </step>
   <step>
    <para>
     Click the <guimenu>Overview</guimenu> tab to see the available
     build targets on the right side.
    </para>
   </step>
  </procedure>
  <para>
   If you need more build targets, you can repeat the procedure above.
   It will be added to the list of existing build targets.
  </para>
  <para>
   If you need to fine tune your build targets, click the
   <guimenu>Repositories</guimenu> tab, find the respective build target,
   and click the <guimenu>Edit repository</guimenu> link.
   This will show the available architectures and additional package
   repositories you can add.
  </para>
  <remark>toms 2017-08-14: Maybe add a screenshot of the Web UI?</remark>
 </sect1>

 <sect1 xml:id="sec.obsbg.uc.newprj">
  <title>Creating a New Project</title>
  <para>
   This section covers how to create packages from a simple C++ project
   hosted on &gh; (the <quote>upstream project</quote>). We assume that this
   project contains source code which you want to package for different
   &suse; distributions.
  </para>
  <note>
   <title>Check the License First</title>
   <para>
    Before building, go to the homepage of the upstream project and check the
    license first. 
   </para>
   <para>
    For example, in the &osbs;, you must only redistribute packages which are
    available under an open source license.
    If you are submitting to &opensuse;, the source code will be checked
    for license compliance. If your package does not abide by an open source
    license, it will be rejected.
   </para>
   <para>
    You can find a list of already used licenses in &obsa; at
    <link xlink:href="https://license.opensuse.org"/>.
    For more details and a comparison of open source licenses in
    general, see <link
     xlink:href="https://en.wikipedia.org/wiki/Comparison_of_free_and_open-source_software_licenses"
    />.
   </para>
  </note>
  <para>
   To create a package from the upstream project, do the following:
  </para>
  <procedure xml:id="pro.obsbg.uc.basicprj">
   <step>
    <para>Set up your project as shown in <xref linkend="sec.obsbg.uc.setuphome"/>.
    </para>
   </step>
   <step>
    <para>
     Open a shell. Choose or create a directory on your system in a partition
     that has enough space to hold the package sources.
    </para>
   </step>
   <step>
    <para>
     Check out your home project:
    </para>
    <screen>&prompt.user;<command>osc</command> checkout &obshome1;</screen>
    <para>
     This will create an empty <filename>&obsworkdir1;</filename> directory
     in the current directory.
     </para>
   </step>
   <step>
    <para>Create a new package inside your local <firstterm
      baseform="Working Directory">working directory</firstterm>:
    </para>
    <screen>&prompt.user;<command>cd</command> &obsworkdir1;
&prompt.user;<command>osc</command> mkpac example-osc</screen>
   </step>
   <step>
    <para>
     Get the pristine source code of the upstream project and save it in
     <filename>&obsworkdir1;/&gitproject;</filename>.
    </para>
    <para>
     Download a TAR archive of the sources.
    </para>
    <para>
     In our example, the project is hosted on &gh; and this URL can be used:
     <link xlink:href="&gitupstream1;/releases"/>.
     If there is no published release of a project yet, download the latest sources
     by clicking the <guimenu>Clone or download</guimenu> button and then the
     <guimenu>Download ZIP</guimenu> link.
    </para>
   </step>
   <step>
    <para>
     Create the &packspec;. This file contains metadata and build
     instructions.
    </para>
    <para>
     In this example, we are building an RPM for &opensuse;<!-- which can later
     be installed-->. For RPM-based distributions, we create a <firstterm
      baseform="Spec File">spec file</firstterm>. 
     The skeleton of such a spec file looks like this:
    </para>
    <screen>#
# spec file for package &gitproject;
#
# -- Copyright omitted --

Name:           &gitproject; <co xml:id="co.obsbg.uc.basicprj.metadata"/>
Version:        &gitprjvers; <xref linkend="co.obsbg.uc.basicprj.metadata"/>
Release:        0 <xref linkend="co.obsbg.uc.basicprj.metadata"/>
License:        GPL-3.0 <xref linkend="co.obsbg.uc.basicprj.metadata"/>
Group:          TBD <xref linkend="co.obsbg.uc.basicprj.metadata"/>
Summary:        Example tool for OBS <xref linkend="co.obsbg.uc.basicprj.metadata"/>
Url:            &gitupstream1; <xref linkend="co.obsbg.uc.basicprj.metadata"/>
Source:         &gitproject;-%{version}.tar.gz <xref linkend="co.obsbg.uc.basicprj.metadata"/>
BuildRequires:  gcc <co xml:id="co.obsbg.uc.basicprj.buildreq"/>
BuildRequires:  cmake <xref linkend="co.obsbg.uc.basicprj.buildreq"/>
BuildRoot:      %{_tmppath}/%{name}-%{version}-build

%description <co xml:id="co.obsbg.uc.basicprj.description"/>

%prep <co xml:id="co.obsbg.uc.basicprj.prep"/>
%setup -q -n %{name}-%{version}

%build <co xml:id="co.obsbg.uc.basicprj.build"/><!--
export CFLAGS="$RPM_OPT_FLAGS -DNDEBUG"
export CXXFLAGS="$RPM_OPT_FLAGS -DNDEBUG"

cmake . \
    -DPREFIX=%{_prefix} \
    -DDOC_DIR=%{_docdir} \
    -DLIB_DIR=%{_lib} \
make
-->

%install <co xml:id="co.obsbg.uc.basicprj.install"/><!--
make install DESTDIR="$RPM_BUILD_ROOT"-->

%files <co xml:id="co.obsbg.uc.basicprj.files"/>
%defattr(-,root,root,-)
%doc README LICENSE *.txt
%{_bindir}/*

%changelog <co xml:id="co.obsbg.uc.basicprj.cl"/></screen>
    <calloutlist>
     <callout arearefs="co.obsbg.uc.basicprj.metadata">
      <formalpara>
       <title>The Header</title>
       <para>Metadata like package name, version, release,
       license, the RPM group, a brief summary, the upstream URL, and the name
       of the source file.
       </para>
      </formalpara>
     </callout>
     <callout arearefs="co.obsbg.uc.basicprj.buildreq">
      <formalpara>
       <title>Build Requirements</title>
       <para>Lists dependencies on other packages which are needed for building.
        The listed packages are downloaded and installed before building
        the package.</para>
      </formalpara>
      <para>
      </para>
     </callout>
     <callout arearefs="co.obsbg.uc.basicprj.description">
      <formalpara>
       <title>The Description Section</title>
       <para>Illustrates the purpose of the package and gives a comprehensive
        explanation.</para>
      </formalpara>
     </callout>
     <callout arearefs="co.obsbg.uc.basicprj.prep">
      <formalpara>
       <title>The Preparation Section</title>
       <para>
        Prepares the sources for building. This usually includes unpacking
        them with the <literal>%setup</literal> macro and patching them using
        the <literal>%patch</literal> macro. (However, patching is not shown
        here. For more information, see
        <xref linkend="sec.obsbg.uc.patching"/>.)
       </para>
      </formalpara>
     </callout>
     <callout arearefs="co.obsbg.uc.basicprj.build">
      <formalpara>
       <title>The Build Section</title>
       <para>
        Contains Shell commands or RPM macros for building the package.
       </para>
      </formalpara>
      <para>
      </para>
     </callout>
     <callout arearefs="co.obsbg.uc.basicprj.install">
      <formalpara>
       <title>The Install Section</title>
       <para>Contains Shell commands or RPM macros which
       create directories or copy files to the installation location.
       </para>
      </formalpara>
     </callout>
     <callout arearefs="co.obsbg.uc.basicprj.files">
      <formalpara>
       <title>The Files Section</title>
       <para>Lists all files and directories which belong to
        the package. Documentation-related files are marked with
        <literal>%doc</literal> and are automatically installed in the
        default documentation directory.
       </para>
      </formalpara>
     </callout>
     <callout arearefs="co.obsbg.uc.basicprj.cl">
      <formalpara>
       <title>The Changelog Section</title>
       <para>This section is usually empty. Instead, &obsa; searches for a
       file with the extension <filename class="extension"
       >.changes</filename>. If such a file exists in the project directory,
       it will automatically be included as a changelog.
       The changelog file itself contains a high level overview of the
       history of the package.</para>
      </formalpara>
     </callout>
    </calloutlist>
    <para>
     <remark>toms 2017-08-17: FIXME: Better link to OBS instead of GH?</remark>
     For the complete spec file, see <link xlink:href="&gitupstream1;"/>.
    </para>
   </step>
   <step>
    <para>Create a changelog file:</para>
    <screen>&prompt.user;<command>osc</command> vc</screen>
    <para>This command will open an editor with the following content:</para>
    <screen>-------------------------------------------------------------------
Fri Aug 23 12:31:41 UTC 2017 - &exampleuser_mail;</screen>
    <para>
     In the editor, add a short summary of your changes.
     Usually, a changelog entry contains a high-level overview such as the
     version of the software in the package, which patches you applied,
     or something else that you have changed in your project.
    </para>
    <para>
     Afterwards, save the file and leave the editor. &osccmd; then
     creates the file <filename>&gitproject;.changes</filename>.
    </para>
   </step>
   <step>
    <para>Add all the files to your working directory:</para>
    <screen>&prompt.user;<command>osc</command> add *.spec *.changes *.tar.gz</screen>
   </step>
   <step>
    <para>Build the package for a default build target:</para>
    <screen>&prompt.user;<command>osc</command> build --local-package <!-- 
openSUSE_Tumbleweed x86_64 *.spec--></screen>
    <remark>toms 2017-08-17: Please review the following paragraphs:</remark>
    <para>
     The option <option>--local-package</option> is used here, because the
     package is not yet submitted to &obsa;.
    </para>
    <para>
     The default build target is set in the &osc; configuration
     file <filename>~/.oscrc</filename> in the variable
     <option>build_repository</option>. On &osbs; this is usually &tw;.
    </para>
    <para>To build the package for another build target,
     use the following command:</para>
    <screen>&prompt.user;<command>osc</command> build --local-package openSUSE_Tumbleweed x86_64 *.spec</screen>
   </step>
   <step>
    <para>
     Check if your build was successful. If everything was fine, commit the
     files to your package to your home project on &obsa;:</para>
    <screen>&prompt.user;<command>osc</command> commit</screen>
    <remark>toms 2017-08-17: FIXME: Link to User Guide? Troubleshooting
    section with chroot and buildlog specialities?</remark>
    <para>
     If you encounter build errors, use the <command>osc buildlog</command>
     command to review it, as described below.
    </para>
   </step>
  </procedure>
  <para>To watch the current build of a specific build target, use the
   <command>buildlog</command> (alias <command>bl</command>) subcommand
   inside your working directory:
  </para>
  <screen>&prompt.user;<command>osc</command> buildlog openSUSE_Tumbleweed x86_64</screen>
 </sect1>

 <sect1 xml:id="sec.obsbg.uc.patching">
  <title>Patching Source Code</title>
  <para>
   This section describes how to patch an upstream project. We use the same
   project as shown in <xref linkend="sec.obsbg.uc.newprj"/>.
  </para>
  <para>
   There are different reasons for patching a package:
  </para>
  <itemizedlist>
   <listitem>
    <formalpara>
     <title>You Do Not Have Permission to Commit Upstream</title>
    <para>
     Often, you cannot commit changes directly to the upstream project.
     If you send changes to the upstream project, they may be integrated
     late or even be rejected.
    </para>
    </formalpara>
    <para>
     Patch files allow making changes while keeping source code pristine and also
     allow independence from an upstream project's release cycle, coding
     style, and internal workings.
    </para>
   </listitem>
   <listitem>
    <formalpara>
     <title>To Apply Security and Bug Fixes or Distribution-specific Fixes</title>
     <para></para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <title>To Change the Source Code, So It Builds on &obsa;</title>
     <para></para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <title>To Improve Security and Traceability</title>  
    <para>
     A pristine source code in &obsa; is easier to check for changes than a
     modified one. The check is usually done with a checksum (MD5 or SHA).
    </para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <title>To Improve Structure and Consistency</title>
    <para>
     From an organizational point of view, it is better when changes are
     separated from the source code. With the changes inside the patch file,
     everybody can see <emphasis>what</emphasis> was changed and
     which files changes were applied to.
    </para>
    </formalpara>
   </listitem>
  </itemizedlist>
  <para>
   We assume that you already have a project as described in
  <xref linkend="sec.obsbg.uc.newprj"/>. The project directory should look
   similar to this:
  </para>
  <screen><emphasis>project directory</emphasis>
‚îú‚îÄ‚îÄ &gitproject;-&gitprjvers;.tar.gz
‚îú‚îÄ‚îÄ &gitproject;.changes
‚îî‚îÄ‚îÄ &gitproject;.spec</screen>
  <para>In our case, we want to change the source code under
   <filename>src/main.cpp</filename> to change the greeting message.
  </para>
  <procedure>
   <title>Patching</title>
   <step>
    <para>Open a shell and change to your working directory.</para>
   </step>
   <step>
    <para>Prepare a patch file:</para>
    <substeps>
     <step>
      <para>Unpack the source code:</para>
      <screen>&prompt.user;<command>tar</command> xvf &gitproject;-*.tar.gz</screen>
      <para>
       If you have downloaded the archive from &gh;, the archive contains
       a directory in the form <filename><replaceable
        >NAME</replaceable>-<replaceable>VERSION</replaceable></filename>.
       In our case, there will be a directory <filename>&gitproject;-&gitprjvers;/</filename>
       after unpacking.
      </para>
     </step>
     <step>
      <para>
       Change into the directory <filename>&gitproject;-&gitprjvers;/</filename>
       and make a copy of the original C++ source file:
      </para>
      <screen>&prompt.user;<command>cd</command> &gitproject;-&gitprjvers;/
&prompt.user;<command>cp</command> src/main.cpp src/main.cpp.orig</screen>
     </step>
     <step>
      <para>Make your changes in <filename>src/main.cpp</filename>.</para>
     </step>
     <step>
      <para>Create a diff and carefully inspect your changes:</para>
      <screen>&prompt.user;<command>diff</command> -u src/main.cpp.orig src/main.cpp</screen>
      <para>The output should look like this:</para>
      <screen language="diff">--- src/main.cpp.orig   2017-08-09 16:28:31.407449707 +0200
+++ src/main.cpp        2017-08-09 16:28:49.131541230 +0200
@@ -2,7 +2,7 @@

 int main()
 {
-    std::cout&lt;&lt;"Hello OBS!\n";
+    std::cout&lt;&lt;"Hello Alice!\n";

     return 0;
 }</screen>
     </step>
     <step>
      <para>Redirect the diff into a file:</para>
      <screen>&prompt.user;<command>diff</command> -u src/main.cpp.orig src/main.cpp \
  > ../&gitproject;_main.diff</screen>
      <para>
       You can use an arbitrary name for the patch file. However, we
       recommend giving the file a speaking name and adding the name of the
       upstream project. If there is a bug or issue number associated with
       the patch, add
       it to the file name as well. You can either use <filename
        class="extension">.diff</filename> or <filename
         class="extension">.patch</filename> as the file extension, both are
         common.
      </para>
     </step>
     <step>
      <para>
       You can remove the directory <filename
        >&gitproject;-&gitprjvers;/</filename>, it is not needed anymore.
      </para>
     </step>
    </substeps>
   </step>
   <step>
    <para>Open your spec file and add the following line in the header under
    the <literal>Source</literal> line like this:</para>
    <screen>Source:         &gitproject;-%{version}.tar.gz
Patch0:         &gitproject;_main.diff</screen>
   </step>
   <step>
    <para>In the <literal>%prep</literal> section, add the <literal>%patch</literal>
     macro:</para>
    <screen>%prep
%setup -q -n %{name}-%{version}
%patch0</screen>
   </step>
   <step>
    <para>
     Add your patch file to the local repository and rebuild your package:
    </para>
    <screen>&prompt.user;<command>osc</command> add &gitproject;_main.diff
&prompt.user;<command>osc</command> build openSUSE_Tumbleweed x86_64 *.spec</screen>
   </step>
   <step>
    <para>
     If everything was successful, commit your changes:
    </para>
    <screen>&prompt.user;<command>osc</command> commit</screen>
    <para>
     An editor will open, so you can specify and save a commit message.
    </para>
   </step>
  </procedure>
  <para>
   If you have to deal with many patches, the tool
   <command>quilt</command> can be useful. For more information about
   <command>quilt</command>, see
   <link xlink:href="https://savannah.nongnu.org/projects/quilt"/>.
  </para>
 </sect1>

 <sect1 xml:id="sec.obsbg.uc.branchprj">
  <title>Branching a Package</title>
  <para>
   This section describes how to collaborate between projects.
   You can <firstterm baseform="Branch">branch</firstterm> any package in
   &obsa; into any project that you have write permission for. By default,
   new branches will be created as a subproject of your home project.
   Such default branches have names beginning with <uri>&obsbranch1;</uri>.
  </para>
  <para>
   There are different reasons to branch a package:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     To modify the source code, building it, trying the effect of the
     changes, and submitting back changes to the original project.
     Usually, you use this workflow when you do not have write permissions of
     a project.
    </para>
   </listitem>
   <listitem>
    <para>
     To make changes without affecting the original project.
    </para>
   </listitem>
   <listitem>
    <para>
     To apply temporary changes to try out a different path of development.
    </para>
   </listitem>
   
  </itemizedlist>
  <para>
   We assume that you have checked out the project
   <uri>&obshome1;/&gitproject;</uri>
   on &obsa; and the user <systemitem class="username">&obsuser2;</systemitem>
   wants to change the code to change the welcome message. The code should
   then be submitted to the original project.
  </para>
  <para>
   User <systemitem class="username">&obsuser2;</systemitem> has to perform the
   following steps:
  </para>
  <procedure xml:id="pro.obsbg.uc.branchprj">
   <title>Branching from a Project</title>
   <step>
    <para>
     Open a shell. Choose or create a directory on your system where you
     have enough space.
    </para>
   </step>
   <step>
    <para>Create the branch from &exampleuser_plain;'s home project:</para>
    <screen>&prompt.user2;<command>osc</command> branchco &obshome1; &gitproject;</screen>
    <para>This will create a branched package in &obsa; at <uri>&obsbranch2;/&gitproject;</uri>
     and will check out a directory
     <filename>&obsworkdir2;/branches/home/&obsuser1;/&gitproject;</filename>.
    </para>
   </step>
   <step>
    <para>Change the working directory to your checked out branch:</para>
    <screen>&prompt.user2;<command>cd</command> &obsworkdir2;/branches/home/&obsuser1;/&gitproject;</screen>
   </step>
   <step>
    <para>Make changes as shown in <xref
     linkend="sec.obsbg.uc.patching"/>.
    </para>
   </step>
   <step>
    <para>Build the package for the default build target:</para>
    <screen>&prompt.user;<command>osc</command> build</screen>
   </step>
   <step>
    <para>Review the build log:</para>
    <screen>&prompt.user;<command>osc</command> buildlog openSUSE_Tumbleweed x86_64</screen>
   </step>
   <step>
    <para>
     Make sure all added and removed files are added to the OBS repository:
    </para>
    <screen>&prompt.user2;<command>osc</command> addremove</screen>
   </step>
   <step>
    <para>
     If everything was successful, commit your changes:
    </para>
    <screen>&prompt.user;<command>osc</command> commit</screen>
    <para>
     An editor will open, so you can specify and save a commit message.
    </para>
   </step>
   <step>
    <para>
     Create a submit request and finish it by adding a comment:
    </para>
    <!--
    osc submitreq [OPTIONS]
    osc submitreq [OPTIONS] DESTPRJ [DESTPKG]
    osc submitreq [OPTIONS] SOURCEPRJ SOURCEPKG DESTPRJ [DESTPKG]
    -->
    <screen>&prompt.user2;<command>osc</command> submitreq</screen>
    <para>
    <!-- Usually, you do not have to add the project or package names here.-->
     By default, <command>submitreq</command> without any options submits back
     to the package where you branched from. Note, with the submit request
     you submit a specific version of the source. Later changes do not
     get automatically fetched by default.
    </para>
    <para>
     If there are multiple packages in a branch, all packages will
     be submitted together. To avoid that, add the names of the source and
     destination projects and the package name to the command line:
    </para>
    <screen>&prompt.user2;<command>osc</command> submitreq &obsbranch2;:&obshome1; &gitproject; &obshome1;</screen>
   </step>
  </procedure>
  <para>
   User <systemitem class="username">&obsuser2;</systemitem> has
   finished the task now and the submit request is assigned to <systemitem
    class="username">&obsuser1;</systemitem>. User <systemitem
     class="username">&obsuser1;</systemitem> can decide whether to:
  </para>
  <itemizedlist>
   <listitem>
    <formalpara>
     <title>Accept the Submit Request</title>
     <para>The changes from user <systemitem class="username"
      >&obsuser2;</systemitem> will be integrated into the
     <uri>&obshome1;</uri> project. The accepted submit request will be
      closed. To make further changes, &obsuser2; needs to create a new submit
      request.
     </para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <title>Decline the Submit Request</title>
     <para>
      The changes from user <systemitem class="username"
       >&obsuser2;</systemitem> are not integrated into the
      <uri>&obshome1;</uri> project.
     </para>
    </formalpara>
    <para>
      For example, reasons to decline a
      submit request are build errors or style issues.
      When declining submit request, the reviewer will usually give a
      reason. User &obsuser2; can then correct their submission using a new submit
      request that supersedes the previous one, disagreeing and reopen
      the request, or accepting the refusal and revoke the request.
    </para>
    <para>
     The submitter will see declined requests still as open requests,
     because users see it as task on the &obsa; Web UI.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   User <systemitem class="username">&obsuser1;</systemitem> does the
   following steps:
  </para>
  <procedure xml:id="pro.obsbg.uc.branchprj.sr">
   <title>Dealing with Submit Requests</title>
   <step>
    <para>Show all submit requests that belong to your home project</para>
    <remark>toms 2017-08-10: Not sure if this is the correct command</remark>
    <screen>&prompt.user;<command>osc</command> request list -s new -P &obshome1;</screen>
   </step>
   <step>
    <para>
     Find the correct submit request. If you know the correct number you can
     use:
    </para>
    <screen>&prompt.user;<command>osc</command> request show 246</screen>
   </step>
   <step>
    <para>
     Review the request and decide:
    </para>
    <stepalternatives>
     <step>
      <para>Accept the submit request with:</para>
      <screen>&prompt.user;<command>osc</command> request accept 246 --message="Reviewed OK."</screen>
     </step>
     <step>
      <para>Decline the request and give a reason:</para>
      <screen>&prompt.user;<command>osc</command> request decline 256 --message="Declined, because of missing semicolon."</screen>
     </step>
    </stepalternatives>
   </step>
  </procedure>
  <para>
   If the submit request was accepted, the changes will be integrated into the
   home project <uri>&obshome1;</uri>.
  </para>
  <para>
   If the submit request was declined, you can fix the issues and resubmit the
   package. When creating a new submit request, &osc; will ask whether to
   supersede the previous request.
  </para>
 </sect1>

 <sect1 xml:id="sec.obsbg.uc.install-from-obs">
  <title>Installing Packages from &obsa;</title>
  <para>
   &obsa; provides a place which contains all the distribution-specific and
   architecture-specific versions
   of successfully built packages. When you create a package
   in your &obsa; home project, all successfully built packages will appear
   under the <uri>&obsdnlurlhome1;</uri> URL.
  </para>
  <para>
   However, this is only true for the home project itself and manually created
   subprojects but not for subprojects created as a result of branching a
   package. Branched projects are not published by default.
   If you need the build results though, download the binaries manually with
   <command>osc getbinaries</command>. 
  </para>
  <para>
   For example, if you have enabled the &tw; distribution,
   all packages for Tumbleweed will appear under the URL
   <uri>&obsdnlurlhome1;/openSUSE_Tumbleweed</uri>. This <emphasis>download
   repository</emphasis> is used as an installation source for Zypper or &yast;.
  </para>
  <para>To install the <package>&gitproject;</package> package from your home project,
  use the following steps:</para>
  <procedure>
   <step xml:id="st.obsbg.uc.install-from-obs.repourls">
    <para>Inside your working directory, determine the download repository
     URLs:</para>
    <screen>&prompt.user;<command>osc</command> repourls
&obsdnlurlhome1;/openSUSE_Tumbleweed/&obshome1;.repo
&obsdnlurlhome1;/openSUSE_42.2/&obshome1;.repo</screen>
   </step>
   <step>
    <para>Copy the desired URL of your preferred distribution. In our case, that
     is the line containing <systemitem>openSUSE_Tumbleweed</systemitem>.</para>
   </step>
   <step xml:id="st.obsbg.uc.install-from-obs.zypperar">
    <para>Use <command>zypper</command> and add the copied URL:
    </para>
    <screen>&prompt.root;<command>zypper</command> addrepo &obsdnlurlhome1;/openSUSE_Tumbleweed/&obshome1;.repo</screen>
    <para>
     You will be asked to accept the GPG key of the download repository.</para>
   </step>
   <step xml:id="st.obsbg.install">
    <para>Install the package:</para>
    <screen>&prompt.root;<command>zypper</command> install &gitproject;</screen>
   </step>
  </procedure>
  <para>
   To update the package again, only run <xref linkend="st.obsbg.install"/>.
   You do not need to execute
   <xref linkend="st.obsbg.uc.install-from-obs.repourls"/> again, as the
   repository is already configured in your system.
  </para>
 </sect1>

 <sect1 xml:id="sec.obsbg.cheatsheet">
  <title>Other Useful &osccmd; Commands</title>
  <para>
   The following list gives you a short overview of frequently used &osccmd;
   subcommands that were not mentioned in this guide so far. For an
   overview of their syntax, use
   <command>osc <replaceable>SUBCOMMAND</replaceable> --help</command>.
  </para>
  <variablelist>
   <varlistentry>
    <term><command>osc diff</command></term>
    <listitem>
     <para>Generates a diff, comparing local changes against the remote
      &obsa; project.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>osc list</command></term>
    <listitem>
     <para>Shows source or binaries on an &obsa; server.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>osc prjresults</command></term>
    <listitem>
     <para>Shows project-wide build results.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>osc status</command></term>
    <listitem>
     <para>Shows the status of files in your working directory</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
</article>
