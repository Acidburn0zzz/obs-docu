<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.1" xml:id="cha.obs.package_formats"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" >
 <title>Supported Build Recipes and Package Formats</title>
 <info/>
 <para> &obsa; differentiates between the format of the build recipes and the
  format of the installed packages. For example, the spec receipe format is
  used to build RPM packages by calling <command>rpmbuild</command>.
 </para>
 <para>
  In most cases, the build result format is the same as the package format
  used for setting up the build environment, but
  sometimes the format is different. An example is the &kiwi;
  recipe format, which can build <!--products and--> ISOs, but uses RPM
  packages to setup the build process.
 </para>
 <para> OBS currently supports the following recipe formats and packages: </para>
 <itemizedlist>
  <title>Supported Package Formats</title>
  <listitem>
   <para>RPM package format, used for all RPM-based distributions like
    &opensuse;, &sle;, Fedora, and others.</para>
  </listitem>
  <listitem>
   <para>DEB package format, used in Debian, Ubuntu, and derived distributions</para>
  </listitem>
  <listitem>
   <para>Arch package format, used by Arch Linux</para>
  </listitem>
 </itemizedlist>

 <itemizedlist>
  <title>Supported Recipe Formats</title>
  <listitem>
   <para>Spec format for RPM packages</para>
  </listitem>
  <listitem>
   <para>Dsc format</para>
  </listitem>
  <listitem>
   <para>&kiwi; format, both product and appliances</para>
  </listitem>
  <listitem>
   <para>preinstallimage</para>
  </listitem>
  <listitem>
   <para>SsimpleImage format</para>
  </listitem>
 </itemizedlist>

 <sect1>
  <title>Setup a Format</title>
  <para> If no recipe format and binary format is specified in the project
   configuration, &obsa; tries to deduce them from the preinstall list, which
   includes the name of the used package manager.
   This means that you need to manually configure the
    <literal>kiwi</literal> recipe config, as an RPM package format will select
    <literal>spec</literal> builds as default. This configuration is done by
   adding a <literal>Type</literal> line to the project configuration. </para>
 </sect1>
 <sect1>
  <title>Recipe Specials</title>
  <para>
   Each format has some special conditions or limitations which you should
   be aware of.
  </para>

  <sect2>
   <title>RPM: Spec</title>
   <para> For building RPMs you need a <filename
    class="extension">.spec</filename> file for each package, containing
    its build description. &obsa; parses the spec file's BuildRequires lines to
    get a list of package dependencies. OBS uses this information to both build
    the packages in the correct order and also for setting up the build
    environment. The parser understands most of RPMs macro handling, so it is
    possible to use architecture specific BuildRequires, conditional builds and
    other advanced RPM features. </para>
  </sect2>

  <sect2>
   <title>Debian: Deb</title>
   <para> To build <filename class="extension">.deb</filename> files, which
    are used on Debian-based distributions, you need the following files:
   </para>
   <variablelist>
    <varlistentry>
     <term><filename>debian.control</filename></term>
     <listitem>
      <para>The file contains the meta information for the package like the
       build dependencies or some description. </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>debian.rules</filename></term>
     <listitem>
      <para>This file describes the build section of the deb building
    process. There are the configure and make compile commands including other
    deb building sections.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename><replaceable>PACKAGE</replaceable>.dsc</filename></term>
     <listitem>
      <para>In this file you describe the package names of each
    subpackage and their dependency level. Unlike rpm, the release numbers are
    not increased automatically during build unless the keyword
    DEBTRANSFORM-RELEASE is added to the file.</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2>
   <title>Arch: pkg</title>
   <para> This package format is for Arch Linux and its derivatives. To build
    an Arch Linux package, you need a <filename>PKGBUILD</filename> file
    containing the build description and the source tarball.
   </para>
   <para>
    The file <filename>PKGBUILD</filename> does not have macros like
    <literal>%{buildroot}</literal>. It contains variables, for example,
      <literal>makedepends=(<replaceable>PACKAGE1</replaceable>,
      <replaceable>PACKAGE2</replaceable>)</literal>.
    These variables are parsed by OBS and uses them as dependencies. On
    Arch Linux you typically build packages without subpackage.
    They are no <package>*-dev</package> or <package>*-devel</package>
    packages. </para>
  </sect2>

  <sect2 xml:id="_kiwi_appliance">
   <title>&kiwi; Appliance</title>
   <para>
    <link xlink:href="http://opensuse.github.io/kiwi/">KIWI</link> is an image
    producing platform that builds images for various formats, starting from
    hardware images, virtualization systems like QEMU, Xen and VMware and many
    more. It supports a wide range of architectures, which are x86, x86_64,
    s390 and ppc. </para>
   <para> Build instructions for &kiwi; usually consists of: </para>
    <itemizedlist>
     <listitem>
      <para>
       <filename>my_image.kiwi</filename> contains the image configuration in xml
       format. Full XML schema documentation can be found <link
        xlink:href="https://doc.opensuse.org/projects/kiwi/schema-doc/"
        >here</link>. </para>
     </listitem>
     <listitem>
      <para>
       <filename>config.sh (optional)</filename> configuration script that runs
       at the end of the installation, but before package scripts have run.
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>root/</filename> directory that contains files that will be
       applied to the built image after package installation. This can also be
       an archived and compressed directory. </para>
     </listitem>
    </itemizedlist>
   <note>
    <para> &obsa; only accepts &kiwi; configuration files with a <filename
     class="extension">.kiwi</filename> suffix. Other naming schemes &kiwi;
     supports like <filename>config.xml</filename>, are ignored in &obsa;.
    </para>
   </note>
   <para> For more information about building images with KIWI, see the <link
     xlink:href="https://doc.opensuse.org/projects/kiwi/doc/">KIWI
     cookbook</link>.
   </para>
  </sect2>
<!--  <sect2>
   <title>&kiwi; product</title>
   <para> ... </para>
  </sect2>-->
  <sect2>
   <title>SimpleImage</title>
   <para> This format can be used to get simple rootfs tarball or squashfs
    image. It does not contain bootloader nor kernel. For advanced features,
    use KIWI. Use simpleimage for simple rootfs tarball/squashfs image of any
    distribution that is supported by OBS but does not have anything fancier
    than that. </para>
   <para> Simple image uses similar syntax as spec file. Supported tags include
    Name, Version and BuildRequires which is the way how to specify list of
    packages to include. #!BuildIgnore can be also used. For additional
    customization %build phase is supported - run via bash. RPM macros are not
    supported, but $SRCDIR shell variable is available. </para>

   <example>
    <title>SimpleImage File</title>
    <screen>Name:           example-image
Version:        1.0
BuildRequire:   emacs
#!BuildIgnore:  gcc-c++

%build
# Set root password
passwd &lt;&lt; EOF
opensuse
opensuse
EOF

# Enable ssh
systemctl enable sshd</screen>
   </example>
  </sect2>
 </sect1>
</chapter>
