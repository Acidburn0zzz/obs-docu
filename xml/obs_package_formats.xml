<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC
  "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.docbook.org/xml/4.5/docbookx.dtd"
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>

<chapter id="cha.obs.package_formats">
  <title>Package Formats </title>
  <para>OBS differentiates between the format of the build recipes and the
        format of the installed packages. For example, the 'spec' recipe
        format is used to build 'rpm' packages by calling rpmbuild. In most
        cases the build result format is the same as the package format
        used for setting up the build environment, but sometimes the format
        is different. An example is the 'kiwi' recipe format, which builds
        products and isos, but uses rpm packages to setup the build process.
  </para>
  <para>OBS currently supports 'rpm', 'deb' (debian), 'arch' as package
        formats and 'spec', 'dsc', 'kiwi' (both product and appliances),
        'arch', and 'preinstallimage' as recipe formats.
  </para>
  <section>
    <title>Setting up a format</title>
    <para>If no recipe format and binary format is specified in the prjconf,
          OBS tries to deduce them from the preinstall list, which includes
          the name of the used package manager. This means that you need to
          manually configure the 'kiwi' recipe config, as a 'rpm' package
          format will select 'spec' builds as default. This configuration
          is done by adding a 'Type' line to the project configuration.
    </para>
  </section>

  <section>
    <title>Recipe Specials</title>
    <para>Each format has some specials</para>

    <section>
      <title>spec</title>
      <para>For building rpms you need a .spec file for each package,
            containing its build description. OBS parses the spec file's
            BuildRequires lines to get a list of package dependencies. OBS
	    uses this information to both build the packages in the correct
            order and also for setting up the build environment. The parser
            understands most of rpm's macro handling, so it's possible to
            use architecture specific BuildRequires, conditional builds
            and other advanced rpm features.
      </para>
    </section>

    <section>
      <title>deb</title>
      <para>To build *.deb files, which are mostly used on debian-based
      distributions, you need the following files:
      <itemizedlist>
       <listitem><simpara>
debian.control
       </simpara></listitem>
      </itemizedlist>
            Here are the meta informations for the package like the build
            dependencies or some description.
      <itemizedlist>
       <listitem><simpara>
debian.rules
       </simpara></listitem>
      </itemizedlist>
            This file describes the build section of the deb build process.
            There are the configure and make compile commands including other deb
            building sections.
      <itemizedlist>
       <listitem><simpara>
$PACKAGE.dsc
       </simpara></listitem>
      </itemizedlist>
            In this file you describe the package names of each subpackage and their
            dependency level.
</para>
    </section>

    <section>
      <title>pkg</title>
      <para>This package format is for Archlinux and his derivates. To
            build a Archlinux pkg you need a PKGBUILD file containing
            the build description and the source tarball. PKGBUILD's have
            no macros like %{buildroot}. They have variables for example
            makedepens=(package1, package2). This variables are parsed by
            the OBS and uses them as dependencies. On Archlinux you
            typically build packages without subpackage. They are no *-dev
            oder *-devel packages.
            </para>
    </section>
    <section>
      <title>kiwi appliance</title>
      <para>KIWI is image producing plattform which builds images for ISO
            images and virtualization systems like QEMU, XEN and VMWare.</para>
    </section>

    <section>
      <title>kiwi product</title>
      <para>...</para>
    </section>
  </section>
   
</chapter>
